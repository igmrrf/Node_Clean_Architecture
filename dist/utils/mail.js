"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.orderSubmission = void 0;
var tslib_1 = require("tslib");
/* eslint-disable no-underscore-dangle */
var mail_1 = tslib_1.__importDefault(require("@sendgrid/mail"));
var config_1 = tslib_1.__importDefault(require("../config"));
var template_1 = require("../helpers/template");
mail_1.default.setApiKey(config_1.default.get("sendgrid.apiKey"));
var orderSubmission = function (userDetails) {
  return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var msg, info, error_1;
    return tslib_1.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (process.env.NODE_ENV === "test") return [2 /*return*/, "test"];
          msg = {
            to: "Founder<founder@domain.com",
            cc: ["Dev Team<dev@domain.com>", "Dev Team<support@domain.com>"],
            from: "Node Clean<noreply@domain.com>",
            subject: "Welcome!",
            html: (0, template_1.signUpTemplate)(userDetails),
          };
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3, , 4]);
          return [4 /*yield*/, mail_1.default.send(msg)];
        case 2:
          info = _a.sent();
          return [3 /*break*/, 4];
        case 3:
          error_1 = _a.sent();
          if (error_1.response) {
            return [2 /*return*/, error_1.response.body];
          }
          return [3 /*break*/, 4];
        case 4:
          return [2 /*return*/, info];
      }
    });
  });
};
exports.orderSubmission = orderSubmission;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm9yZGVyU3VibWlzc2lvbiIsInRzbGliXzEiLCJyZXF1aXJlIiwibWFpbF8xIiwiX19pbXBvcnREZWZhdWx0IiwiY29uZmlnXzEiLCJ0ZW1wbGF0ZV8xIiwiZGVmYXVsdCIsInNldEFwaUtleSIsImdldCIsInVzZXJEZXRhaWxzIiwiX19hd2FpdGVyIiwibXNnIiwiaW5mbyIsImVycm9yXzEiLCJfX2dlbmVyYXRvciIsIl9hIiwibGFiZWwiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJ0byIsImNjIiwiZnJvbSIsInN1YmplY3QiLCJodG1sIiwic2lnblVwVGVtcGxhdGUiLCJ0cnlzIiwicHVzaCIsInNlbmQiLCJzZW50IiwicmVzcG9uc2UiLCJib2R5Il0sInNvdXJjZXMiOlsiLi4vLi4vdHlwZWQvdXRpbHMvbWFpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3JkZXJTdWJtaXNzaW9uID0gdm9pZCAwO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xudmFyIG1haWxfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJAc2VuZGdyaWQvbWFpbFwiKSk7XG52YXIgY29uZmlnXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY29uZmlnXCIpKTtcbnZhciB0ZW1wbGF0ZV8xID0gcmVxdWlyZShcImhlbHBlcnMvdGVtcGxhdGVcIik7XG5tYWlsXzEuZGVmYXVsdC5zZXRBcGlLZXkoY29uZmlnXzEuZGVmYXVsdC5nZXQoXCJzZW5kZ3JpZC5hcGlLZXlcIikpO1xudmFyIG9yZGVyU3VibWlzc2lvbiA9IGZ1bmN0aW9uICh1c2VyRGV0YWlscykgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBtc2csIGluZm8sIGVycm9yXzE7XG4gICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwidGVzdFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgXCJ0ZXN0XCJdO1xuICAgICAgICAgICAgICAgIG1zZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG86IFwiRm91bmRlcjxmb3VuZGVyQGRvbWFpbi5jb21cIixcbiAgICAgICAgICAgICAgICAgICAgY2M6IFtcIkRldiBUZWFtPGRldkBkb21haW4uY29tPlwiLCBcIkRldiBUZWFtPHN1cHBvcnRAZG9tYWluLmNvbT5cIl0sXG4gICAgICAgICAgICAgICAgICAgIGZyb206IFwiTm9kZSBDbGVhbjxub3JlcGx5QGRvbWFpbi5jb20+XCIsXG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IFwiV2VsY29tZSFcIixcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogKDAsIHRlbXBsYXRlXzEuc2lnblVwVGVtcGxhdGUpKHVzZXJEZXRhaWxzKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG1haWxfMS5kZWZhdWx0LnNlbmQobXNnKV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaW5mbyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcl8xLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBlcnJvcl8xLnJlc3BvbnNlLmJvZHldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGluZm9dO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfTtcbmV4cG9ydHMub3JkZXJTdWJtaXNzaW9uID0gb3JkZXJTdWJtaXNzaW9uO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0UsZUFBZSxHQUFHLEtBQUssQ0FBQztBQUNoQyxJQUFJQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUI7QUFDQSxJQUFJQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMvRCxJQUFJRyxRQUFRLEdBQUdKLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLGFBQVUsQ0FBQztBQUN6RCxJQUFJSSxVQUFVLEdBQUdKLE9BQU8sdUJBQW9CO0FBQzVDQyxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDSCxRQUFRLENBQUNFLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDakUsSUFBSVQsZUFBZSxHQUFHLFVBQVVVLFdBQVcsRUFBRTtFQUFFLE9BQU9ULE9BQU8sQ0FBQ1UsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLFlBQVk7SUFDeEcsSUFBSUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLE9BQU87SUFDdEIsT0FBT2IsT0FBTyxDQUFDYyxXQUFXLENBQUMsSUFBSSxFQUFFLFVBQVVDLEVBQUUsRUFBRTtNQUMzQyxRQUFRQSxFQUFFLENBQUNDLEtBQUs7UUFDWixLQUFLLENBQUM7VUFDRixJQUFJQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLE1BQU0sRUFDL0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxZQUFZLE1BQU0sQ0FBQztVQUNqQ1IsR0FBRyxHQUFHO1lBQ0ZTLEVBQUUsRUFBRSw0QkFBNEI7WUFDaENDLEVBQUUsRUFBRSxDQUFDLDBCQUEwQixFQUFFLDhCQUE4QixDQUFDO1lBQ2hFQyxJQUFJLEVBQUUsZ0NBQWdDO1lBQ3RDQyxPQUFPLEVBQUUsVUFBVTtZQUNuQkMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFbkIsVUFBVSxDQUFDb0IsY0FBYyxFQUFFaEIsV0FBVztVQUNwRCxDQUFDO1VBQ0RNLEVBQUUsQ0FBQ0MsS0FBSyxHQUFHLENBQUM7UUFDaEIsS0FBSyxDQUFDO1VBQ0ZELEVBQUUsQ0FBQ1csSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFJLENBQUMsQ0FBQyxDQUFDO1VBQ3pCLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBV3pCLE1BQU0sQ0FBQ0ksT0FBTyxDQUFDc0IsSUFBSSxDQUFDakIsR0FBRyxDQUFDLENBQUM7UUFDbEQsS0FBSyxDQUFDO1VBQ0ZDLElBQUksR0FBR0csRUFBRSxDQUFDYyxJQUFJLEVBQUU7VUFDaEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzQixLQUFLLENBQUM7VUFDRmhCLE9BQU8sR0FBR0UsRUFBRSxDQUFDYyxJQUFJLEVBQUU7VUFDbkIsSUFBSWhCLE9BQU8sQ0FBQ2lCLFFBQVEsRUFBRTtZQUNsQixPQUFPLENBQUMsQ0FBQyxDQUFDLFlBQVlqQixPQUFPLENBQUNpQixRQUFRLENBQUNDLElBQUksQ0FBQztVQUNoRDtVQUNBLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDM0IsS0FBSyxDQUFDO1VBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxZQUFZbkIsSUFBSSxDQUFDO01BQUM7SUFFNUMsQ0FBQyxDQUFDO0VBQ04sQ0FBQyxDQUFDO0FBQUUsQ0FBQztBQUNMZixPQUFPLENBQUNFLGVBQWUsR0FBR0EsZUFBZSJ9
