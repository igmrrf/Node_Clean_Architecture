"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
/**
 * Error handling middleware
 */
var util_1 = tslib_1.__importDefault(require("util"));
var fs_1 = tslib_1.__importDefault(require("fs"));
var http_status_codes_1 = tslib_1.__importDefault(require("http-status-codes"));
var logger_1 = tslib_1.__importDefault(require("../../../base/logger"));
var ResponseBuilder_1 = tslib_1.__importDefault(require("../response/ResponseBuilder"));
var unlink = util_1.default.promisify(fs_1.default.unlink);
// eslint-disable-next-line no-unused-vars
exports.default = function (err, req, res, next) {
  return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var file, files, path, uploads, removeFilesFromDisk, errorMessage, errorData;
    return tslib_1.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          if (!err.isOperationalError) {
            logger_1.default.error("An error occurred: ", {
              error: err.message || err.toString(),
              stack: err.stack,
            });
          }
          (file = req.file), (files = req.files);
          if (!file) return [3 /*break*/, 2];
          path = file.path;
          if (!file.path) return [3 /*break*/, 2];
          if (!fs_1.default.existsSync(path)) return [3 /*break*/, 2];
          return [4 /*yield*/, unlink(path)];
        case 1:
          _a.sent();
          _a.label = 2;
        case 2:
          if (!(files && Object.values(files).length)) return [3 /*break*/, 4];
          uploads = Object.values(files);
          removeFilesFromDisk = uploads.map(function (entry) {
            // eslint-disable-next-line
            var filesToRemove = entry.map(function (upload) {
              if (fs_1.default.existsSync(upload.path)) {
                return unlink(upload.path);
              }
            });
            return filesToRemove;
          });
          return [4 /*yield*/, Promise.all(removeFilesFromDisk)];
        case 3:
          _a.sent();
          _a.label = 4;
        case 4:
          if (err.name || err.error) {
            if (err.name === "ValidationError" || (err.error && err.error.name === "ValidationError")) {
              return [
                2 /*return*/,
                ResponseBuilder_1.default
                  .getResponseHandler(res)
                  .onError(
                    err.name || err.error.name,
                    http_status_codes_1.default.BAD_REQUEST,
                    err.message || err.error.toString(),
                    err.errors || err.error.details,
                  ),
              ];
            }
            return [
              2 /*return*/,
              ResponseBuilder_1.default
                .getResponseHandler(res)
                .onError(err.name, err.status, err.message, err.data),
            ];
          }
          errorMessage = process.env.NODE_ENV === "production" ? "Something bad happened!" : err.message;
          errorData = process.env.NODE_ENV === "production" ? {} : err;
          return [
            2 /*return*/,
            ResponseBuilder_1.default
              .getResponseHandler(res)
              .onError(
                "InternalServerError",
                err.status || http_status_codes_1.default.INTERNAL_SERVER_ERROR,
                errorMessage,
                errorData,
              ),
          ];
      }
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
