"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
/**
 * @module lib/uploader
 * @description Parses a multipart form and uploads the specified files to disk
 */
var multer_1 = tslib_1.__importDefault(require("multer"));
var constants_1 = require("../../../helpers/constants");
var InvalidPayloadError_1 = tslib_1.__importDefault(require("../errors/InvalidPayloadError"));
var ONE_MB = 1000000;
var diskStorage = multer_1.default.diskStorage({
  destination: "temp/uploads",
  filename: function (req, file, cb) {
    var uniqueSuffix = ""
      .concat(Date.now(), "-")
      .concat(Math.round(Math.random() * 1e9), "-")
      .concat(file.originalname);
    cb(null, "".concat(file.fieldname, "-").concat(uniqueSuffix));
  },
});
/**
 * Validates files to ensure that they are in the correct format before uploading
 * @param {String} [fileType="image"] - The expected file type
 */
var fileFilter = function (fileType) {
  if (fileType === void 0) {
    fileType = "image";
  }
  return function (req, file, cb) {
    switch (fileType) {
      case "image":
        if (file.mimetype === "image/jpeg" || file.mimetype === "image/png") {
          cb(null, true);
        } else {
          cb(new InvalidPayloadError_1.default("Only images are allowed"));
        }
        break;
      case "csv":
        if (file.mimetype === "text/csv") {
          cb(null, true);
        } else {
          cb(new InvalidPayloadError_1.default("Only CSVs are allowed"));
        }
        break;
      case "pdf":
        if (file.mimetype === "application/pdf") {
          cb(null, true);
        } else {
          cb(new InvalidPayloadError_1.default("Only PDFs are allowed"));
        }
        break;
      case "video":
        if (["video/mp4", "video/3gpp"].includes(file.mimetype)) {
          cb(null, true);
        } else {
          cb(new InvalidPayloadError_1.default("Only .mp4 and .3gpp formats are allowed"));
        }
        break;
      case "document":
        if (
          [
            "application/pdf",
            "image/jpeg",
            "image/png",
            "application/msword",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
          ].includes(file.mimetype)
        ) {
          cb(null, true);
        } else {
          cb(new InvalidPayloadError_1.default("Only PDF, word documents, and images are allowed"));
        }
        break;
      default:
        cb(new InvalidPayloadError_1.default("Unknown file Type"));
        break;
    }
  };
};
/**
 * Returns a middleware for parsing multipart forms
 * @param {Object} data - Data about the file being uploaded
 * @param {String} data.fileType - The type of file e.g image, pdf
 * @param {String} data.fieldName - The name of the form-data field containing the file
 */
// eslint-disable-next-line func-names
var uploader = function (_a) {
  var fileType = _a.fileType,
    fieldName = _a.fieldName,
    fields = _a.fields;
  return function (req, res, next) {
    var multerInstance = (0, multer_1.default)({
      storage: diskStorage,
      fileFilter: fileFilter(fileType),
      limits: {
        fileSize: fileType === "video" ? null : constants_1.MAX_FILE_UPLOAD_SIZE,
      },
    });
    var uploadMiddleware =
      fields && fields.length ? multerInstance.fields(fields) : multerInstance.single(fieldName);
    uploadMiddleware(req, res, function (error) {
      if (error) {
        var message = "Upload error: ".concat(error.message, ".");
        switch (error.code) {
          case "LIMIT_FILE_SIZE": {
            var uploadLimitInMB = (constants_1.MAX_FILE_UPLOAD_SIZE / ONE_MB).toFixed(2);
            return next(
              new InvalidPayloadError_1.default(
                ""
                  .concat(message, " Only files smaller than ")
                  .concat(constants_1.MAX_FILE_UPLOAD_SIZE, " bytes") +
                  " (".concat(uploadLimitInMB, "MB) are allowed"),
              ),
            );
          }
          case "LIMIT_UNEXPECTED_FILE":
            return next(
              new InvalidPayloadError_1.default(
                "".concat(message, " Document should be uploaded using ") +
                  "'".concat(
                    fields && fields.length
                      ? fields.map(function (el) {
                          return el.name;
                        })
                      : fieldName,
                    "' field(s)",
                  ),
              ),
            );
          default:
            return next(new InvalidPayloadError_1.default(message));
        }
      }
      return next();
    });
  };
};
exports.default = uploader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
