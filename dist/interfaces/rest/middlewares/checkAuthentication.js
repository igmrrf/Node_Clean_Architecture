"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
/**
 * Access control policies
 */
var awilix_1 = require("awilix");
var jwt_1 = tslib_1.__importDefault(require("../../../helpers/jwt"));
var Unauthorized_1 = tslib_1.__importDefault(require("../errors/Unauthorized"));
/**
 * Authenticates requests made to the server
 */
var CheckAuth = /** @class */ (function () {
  function CheckAuth(_a) {
    var User = _a.models.User;
    this.User = User;
  }
  /**
   * Returns the registered user making a request
   * @param {Object} req - Incoming request
   * @returns {{ error, user }}
   */
  CheckAuth.prototype.getUserFromRequest = function (req) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var authorizationHeader, requestToken, payload, user;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!req.headers.authorization) {
              return [2 /*return*/, null];
            }
            authorizationHeader = req.headers.authorization;
            requestToken = authorizationHeader.split("Bearer").pop().trim();
            return [4 /*yield*/, jwt_1.default.decodeJWT(requestToken)];
          case 1:
            payload = _a.sent();
            return [4 /*yield*/, this.User.findById(payload.sub)];
          case 2:
            user = _a.sent();
            return [2 /*return*/, user];
        }
      });
    });
  };
  /**
   * Allows only registered users to make requests
   * @param {Object} req - Incoming request
   * @param {Object} res - Server response
   * @param {Function} next - Next middleware
   */
  CheckAuth.prototype.isLoggedIn = function (req, res, next) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var user, error_1;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4 /*yield*/, this.getUserFromRequest(req)];
          case 1:
            user = _a.sent();
            if (!user) {
              throw new Unauthorized_1.default();
            }
            req.container.register({
              currentUser: (0, awilix_1.asValue)(user),
            });
            next();
            return [3 /*break*/, 3];
          case 2:
            error_1 = _a.sent();
            if (jwt_1.default.isJWTError(error_1)) {
              throw new Unauthorized_1.default("Failed to verify request token - ".concat(error_1.message));
            }
            throw error_1;
          case 3:
            return [2 /*return*/];
        }
      });
    });
  };
  /**
   * Allows only registered Staffs to make requests
   * @param {Object} req - Incoming request
   * @param {Object} res - Server response
   * @param {Function} next - Next middleware
   */
  CheckAuth.prototype.isStaff = function (req, res, next) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var staff, error_2;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4 /*yield*/, this.getUserFromRequest(req)];
          case 1:
            staff = _a.sent();
            if (!staff || staff.type !== "staff") {
              throw new Unauthorized_1.default();
            }
            req.container.register({
              currentUser: (0, awilix_1.asValue)(staff),
            });
            next();
            return [3 /*break*/, 3];
          case 2:
            error_2 = _a.sent();
            if (jwt_1.default.isJWTError(error_2)) {
              throw new Unauthorized_1.default("Failed to verify request token - ".concat(error_2.message));
            }
            throw error_2;
          case 3:
            return [2 /*return*/];
        }
      });
    });
  };
  /**
   * Allows only Admin roled Staffs to make requests
   * @param {Object} req - Incoming request
   * @param {Object} res - Server response
   * @param {Function} next - Next middleware
   */
  CheckAuth.prototype.isAdmin = function (req, res, next) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var staff, error_3;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4 /*yield*/, this.getStaffFromRequest(req)];
          case 1:
            staff = _a.sent();
            if (staff.role !== "admin") {
              throw new Unauthorized_1.default();
            }
            req.container.register({
              currentUser: (0, awilix_1.asValue)(staff),
            });
            next();
            return [3 /*break*/, 3];
          case 2:
            error_3 = _a.sent();
            if (jwt_1.default.isJWTError(error_3)) {
              throw new Unauthorized_1.default("Failed to verify request token - ".concat(error_3.message));
            }
            throw error_3;
          case 3:
            return [2 /*return*/];
        }
      });
    });
  };
  /**
   * Allows both authenticated and un-authenticated users to make requests
   * @param {Object} req - Incoming request
   * @param {Object} res - Server response
   * @param {Function} next - Next middleware
   */
  CheckAuth.prototype.allowAny = function (req, res, next) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var user, error_4;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4 /*yield*/, this.getUserFromRequest(req)];
          case 1:
            user = _a.sent();
            req.container.register({
              currentUser: (0, awilix_1.asValue)(user, {
                lifetime: awilix_1.Lifetime.SCOPED,
              }),
            });
            next();
            return [3 /*break*/, 3];
          case 2:
            error_4 = _a.sent();
            if (jwt_1.default.isJWTError(error_4)) {
              throw new Unauthorized_1.default("Failed to verify request token - ".concat(error_4.message));
            }
            throw error_4;
          case 3:
            return [2 /*return*/];
        }
      });
    });
  };

  return CheckAuth;
})();
exports.default = CheckAuth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
