"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var http_status_codes_1 = tslib_1.__importDefault(require("http-status-codes"));
var BasicResponse = {
  success: false,
  status_code: http_status_codes_1.default.INTERNAL_SERVER_ERROR,
  message: "",
};
/**
 * Handles API responses
 */
var ResponseManager = /** @class */ (function () {
  function ResponseManager() {}
  Object.defineProperty(ResponseManager, "HTTP_STATUS", {
    get: function () {
      return http_status_codes_1.default;
    },
    enumerable: false,
    configurable: true,
  });
  ResponseManager.getResponseHandler = function (res) {
    return {
      onSuccess: function (data, message, code, links) {
        return ResponseManager.respondWithSuccess(res, code, data, message, links);
      },
      onError: function (errorName, errorCode, errorMessage, data) {
        return ResponseManager.respondWithError(res, errorName, errorCode, errorMessage, data);
      },
    };
  };
  ResponseManager.generateHATEOASLink = function (link, method, rel) {
    return {
      link: link,
      method: method,
      rel: rel,
    };
  };
  ResponseManager.respondWithSuccess = function (res, code, data, message, links) {
    if (code === void 0) {
      code = ResponseManager.HTTP_STATUS.OK;
    }
    if (data === void 0) {
      data = {};
    }
    if (message === void 0) {
      message = "success";
    }
    if (links === void 0) {
      links = [];
    }
    var response = tslib_1.__assign({}, BasicResponse);
    response.success = true;
    response.message = message;
    response.data = data;
    response.links = links;
    response.status_code = code;
    return res.status(code).json(response);
  };
  ResponseManager.respondWithError = function (res, errorName, errorCode, message, data) {
    if (errorCode === void 0) {
      errorCode = ResponseManager.HTTP_STATUS.INTERNAL_SERVER_ERROR;
    }
    if (message === void 0) {
      message = "Unknown error";
    }
    if (data === void 0) {
      data = {};
    }
    var response = tslib_1.__assign({}, BasicResponse);
    response.success = false;
    response.name = errorName;
    response.message = message;
    response.status_code = errorCode;
    response.data = data;
    return res.status(errorCode).json(response);
  };
  return ResponseManager;
})();
exports.default = ResponseManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiaHR0cF9zdGF0dXNfY29kZXNfMSIsIl9faW1wb3J0RGVmYXVsdCIsIkJhc2ljUmVzcG9uc2UiLCJzdWNjZXNzIiwic3RhdHVzX2NvZGUiLCJkZWZhdWx0IiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwibWVzc2FnZSIsIlJlc3BvbnNlTWFuYWdlciIsImdldCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJnZXRSZXNwb25zZUhhbmRsZXIiLCJyZXMiLCJvblN1Y2Nlc3MiLCJkYXRhIiwiY29kZSIsImxpbmtzIiwicmVzcG9uZFdpdGhTdWNjZXNzIiwib25FcnJvciIsImVycm9yTmFtZSIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsInJlc3BvbmRXaXRoRXJyb3IiLCJnZW5lcmF0ZUhBVEVPQVNMaW5rIiwibGluayIsIm1ldGhvZCIsInJlbCIsIkhUVFBfU1RBVFVTIiwiT0siLCJyZXNwb25zZSIsIl9fYXNzaWduIiwic3RhdHVzIiwianNvbiIsIm5hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90eXBlZC9pbnRlcmZhY2VzL3Jlc3QvcmVzcG9uc2UvUmVzcG9uc2VCdWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgaHR0cF9zdGF0dXNfY29kZXNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJodHRwLXN0YXR1cy1jb2Rlc1wiKSk7XG52YXIgQmFzaWNSZXNwb25zZSA9IHtcbiAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICBzdGF0dXNfY29kZTogaHR0cF9zdGF0dXNfY29kZXNfMS5kZWZhdWx0LklOVEVSTkFMX1NFUlZFUl9FUlJPUixcbiAgICBtZXNzYWdlOiBcIlwiLFxufTtcbi8qKlxuICogSGFuZGxlcyBBUEkgcmVzcG9uc2VzXG4gKi9cbnZhciBSZXNwb25zZU1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzcG9uc2VNYW5hZ2VyKCkge1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzcG9uc2VNYW5hZ2VyLCBcIkhUVFBfU1RBVFVTXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaHR0cF9zdGF0dXNfY29kZXNfMS5kZWZhdWx0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgUmVzcG9uc2VNYW5hZ2VyLmdldFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gKGRhdGEsIG1lc3NhZ2UsIGNvZGUsIGxpbmtzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlc3BvbnNlTWFuYWdlci5yZXNwb25kV2l0aFN1Y2Nlc3MocmVzLCBjb2RlLCBkYXRhLCBtZXNzYWdlLCBsaW5rcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gKGVycm9yTmFtZSwgZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVzcG9uc2VNYW5hZ2VyLnJlc3BvbmRXaXRoRXJyb3IocmVzLCBlcnJvck5hbWUsIGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBSZXNwb25zZU1hbmFnZXIuZ2VuZXJhdGVIQVRFT0FTTGluayA9IGZ1bmN0aW9uIChsaW5rLCBtZXRob2QsIHJlbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGluazogbGluayxcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgcmVsOiByZWwsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBSZXNwb25zZU1hbmFnZXIucmVzcG9uZFdpdGhTdWNjZXNzID0gZnVuY3Rpb24gKHJlcywgY29kZSwgZGF0YSwgbWVzc2FnZSwgbGlua3MpIHtcbiAgICAgICAgaWYgKGNvZGUgPT09IHZvaWQgMCkgeyBjb2RlID0gUmVzcG9uc2VNYW5hZ2VyLkhUVFBfU1RBVFVTLk9LOyB9XG4gICAgICAgIGlmIChkYXRhID09PSB2b2lkIDApIHsgZGF0YSA9IHt9OyB9XG4gICAgICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHsgbWVzc2FnZSA9IFwic3VjY2Vzc1wiOyB9XG4gICAgICAgIGlmIChsaW5rcyA9PT0gdm9pZCAwKSB7IGxpbmtzID0gW107IH1cbiAgICAgICAgdmFyIHJlc3BvbnNlID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgQmFzaWNSZXNwb25zZSk7XG4gICAgICAgIHJlc3BvbnNlLnN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICByZXNwb25zZS5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgcmVzcG9uc2UuZGF0YSA9IGRhdGE7XG4gICAgICAgIHJlc3BvbnNlLmxpbmtzID0gbGlua3M7XG4gICAgICAgIHJlc3BvbnNlLnN0YXR1c19jb2RlID0gY29kZTtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoY29kZSkuanNvbihyZXNwb25zZSk7XG4gICAgfTtcbiAgICBSZXNwb25zZU1hbmFnZXIucmVzcG9uZFdpdGhFcnJvciA9IGZ1bmN0aW9uIChyZXMsIGVycm9yTmFtZSwgZXJyb3JDb2RlLCBtZXNzYWdlLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnJvckNvZGUgPT09IHZvaWQgMCkgeyBlcnJvckNvZGUgPSBSZXNwb25zZU1hbmFnZXIuSFRUUF9TVEFUVVMuSU5URVJOQUxfU0VSVkVSX0VSUk9SOyB9XG4gICAgICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHsgbWVzc2FnZSA9IFwiVW5rbm93biBlcnJvclwiOyB9XG4gICAgICAgIGlmIChkYXRhID09PSB2b2lkIDApIHsgZGF0YSA9IHt9OyB9XG4gICAgICAgIHZhciByZXNwb25zZSA9IHRzbGliXzEuX19hc3NpZ24oe30sIEJhc2ljUmVzcG9uc2UpO1xuICAgICAgICByZXNwb25zZS5zdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIHJlc3BvbnNlLm5hbWUgPSBlcnJvck5hbWU7XG4gICAgICAgIHJlc3BvbnNlLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICByZXNwb25zZS5zdGF0dXNfY29kZSA9IGVycm9yQ29kZTtcbiAgICAgICAgcmVzcG9uc2UuZGF0YSA9IGRhdGE7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKGVycm9yQ29kZSkuanNvbihyZXNwb25zZSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVzcG9uc2VNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFJlc3BvbnNlTWFuYWdlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixJQUFJQyxtQkFBbUIsR0FBR0YsT0FBTyxDQUFDRyxlQUFlLENBQUNGLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQy9FLElBQUlHLGFBQWEsR0FBRztFQUNoQkMsT0FBTyxFQUFFLEtBQUs7RUFDZEMsV0FBVyxFQUFFSixtQkFBbUIsQ0FBQ0ssT0FBTyxDQUFDQyxxQkFBcUI7RUFDOURDLE9BQU8sRUFBRTtBQUNiLENBQUM7QUFDRDtBQUNBO0FBQ0E7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
