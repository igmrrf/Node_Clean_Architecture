"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var express_1 = tslib_1.__importDefault(require("express"));
var http_1 = tslib_1.__importDefault(require("http"));
var path_1 = tslib_1.__importDefault(require("path"));
/**
 * Creates and configures an HTTP server
 */
var RestServer = /** @class */ (function () {
  function RestServer(_a) {
    var config = _a.config,
      routes = _a.routes,
      logger = _a.logger;
    var app = (0, express_1.default)();
    app.disable("x-powered-by");
    // URL for API documentation
    app.use("/rest-docs", express_1.default.static(path_1.default.resolve(__dirname, "../../../docs/apidocs/")));
    app.use(routes);
    app.use("/v1/payments/", express_1.default.static(path_1.default.join(__dirname, "public/")));
    this.server = http_1.default.createServer(app);
    this.config = config;
    this.logger = logger;
  }
  RestServer.prototype.start = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var port, serviceName, serviceVersion;
      var _this = this;
      return tslib_1.__generator(this, function (_a) {
        port = this.config.get("app.httpPort");
        serviceName = this.config.get("app.serviceName");
        serviceVersion = this.config.get("app.serviceVersion");
        return [
          2 /*return*/,
          this.server.listen(port, function () {
            _this.logger.info(
              "REST server for "
                .concat(serviceName, " v")
                .concat(serviceVersion, " listening on port ")
                .concat(port),
            );
          }),
        ];
      });
    });
  };
  RestServer.prototype.close = function (cb) {
    return this.server.close(cb);
  };
  return RestServer;
})();
exports.default = RestServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiZXhwcmVzc18xIiwiX19pbXBvcnREZWZhdWx0IiwiaHR0cF8xIiwicGF0aF8xIiwiUmVzdFNlcnZlciIsIl9hIiwiY29uZmlnIiwicm91dGVzIiwibG9nZ2VyIiwiYXBwIiwiZGVmYXVsdCIsImRpc2FibGUiLCJ1c2UiLCJzdGF0aWMiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiam9pbiIsInNlcnZlciIsImNyZWF0ZVNlcnZlciIsInByb3RvdHlwZSIsInN0YXJ0IiwiX19hd2FpdGVyIiwicG9ydCIsInNlcnZpY2VOYW1lIiwic2VydmljZVZlcnNpb24iLCJfdGhpcyIsIl9fZ2VuZXJhdG9yIiwiZ2V0IiwibGlzdGVuIiwiaW5mbyIsImNvbmNhdCIsImNsb3NlIiwiY2IiXSwic291cmNlcyI6WyIuLi8uLi8uLi90eXBlZC9pbnRlcmZhY2VzL3Jlc3QvU2VydmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgZXhwcmVzc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImV4cHJlc3NcIikpO1xudmFyIGh0dHBfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJodHRwXCIpKTtcbnZhciBwYXRoXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGF0aFwiKSk7XG4vKipcbiAqIENyZWF0ZXMgYW5kIGNvbmZpZ3VyZXMgYW4gSFRUUCBzZXJ2ZXJcbiAqL1xudmFyIFJlc3RTZXJ2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzdFNlcnZlcihfYSkge1xuICAgICAgICB2YXIgY29uZmlnID0gX2EuY29uZmlnLCByb3V0ZXMgPSBfYS5yb3V0ZXMsIGxvZ2dlciA9IF9hLmxvZ2dlcjtcbiAgICAgICAgdmFyIGFwcCA9ICgwLCBleHByZXNzXzEuZGVmYXVsdCkoKTtcbiAgICAgICAgYXBwLmRpc2FibGUoXCJ4LXBvd2VyZWQtYnlcIik7XG4gICAgICAgIC8vIFVSTCBmb3IgQVBJIGRvY3VtZW50YXRpb25cbiAgICAgICAgYXBwLnVzZShcIi9yZXN0LWRvY3NcIiwgZXhwcmVzc18xLmRlZmF1bHQuc3RhdGljKHBhdGhfMS5kZWZhdWx0LnJlc29sdmUoX19kaXJuYW1lLCBcIi4uLy4uLy4uL2RvY3MvYXBpZG9jcy9cIikpKTtcbiAgICAgICAgYXBwLnVzZShyb3V0ZXMpO1xuICAgICAgICBhcHAudXNlKFwiL3YxL3BheW1lbnRzL1wiLCBleHByZXNzXzEuZGVmYXVsdC5zdGF0aWMocGF0aF8xLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsIFwicHVibGljL1wiKSkpO1xuICAgICAgICB0aGlzLnNlcnZlciA9IGh0dHBfMS5kZWZhdWx0LmNyZWF0ZVNlcnZlcihhcHApO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgfVxuICAgIFJlc3RTZXJ2ZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwb3J0LCBzZXJ2aWNlTmFtZSwgc2VydmljZVZlcnNpb247XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgcG9ydCA9IHRoaXMuY29uZmlnLmdldChcImFwcC5odHRwUG9ydFwiKTtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZSA9IHRoaXMuY29uZmlnLmdldChcImFwcC5zZXJ2aWNlTmFtZVwiKTtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlVmVyc2lvbiA9IHRoaXMuY29uZmlnLmdldChcImFwcC5zZXJ2aWNlVmVyc2lvblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy5zZXJ2ZXIubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5pbmZvKFwiUkVTVCBzZXJ2ZXIgZm9yIFwiLmNvbmNhdChzZXJ2aWNlTmFtZSwgXCIgdlwiKS5jb25jYXQoc2VydmljZVZlcnNpb24sIFwiIGxpc3RlbmluZyBvbiBwb3J0IFwiKS5jb25jYXQocG9ydCkpO1xuICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZXN0U2VydmVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXIuY2xvc2UoY2IpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc3RTZXJ2ZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gUmVzdFNlcnZlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixJQUFJQyxTQUFTLEdBQUdGLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0QsSUFBSUcsTUFBTSxHQUFHSixPQUFPLENBQUNHLGVBQWUsQ0FBQ0YsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFD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
