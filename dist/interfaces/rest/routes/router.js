"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
// import CacheMan from "cacheman";
// import EngineRedis from "cacheman-redis";
var errorHandler_1 = tslib_1.__importDefault(require("../middlewares/errorHandler"));
var notFoundHandler_1 = tslib_1.__importDefault(require("../middlewares/notFoundHandler"));
var cors_1 = tslib_1.__importDefault(require("cors"));
var express_1 = tslib_1.__importStar(require("express"));
var morgan_1 = tslib_1.__importDefault(require("morgan"));
var v1_1 = tslib_1.__importDefault(require("./v1"));
/**
 * Configures express middlewares
 */
exports.default = function (_a) {
  var config = _a.config,
    containerMiddleware = _a.containerMiddleware;
  var router = (0, express_1.Router)();
  router.use(require("helmet")());
  var NODE_ENV = config.get("app.env");
  router.use((0, morgan_1.default)(NODE_ENV === "production" ? "combined" : "dev"));
  var bodyLimit = config.get("app.bodyLimit");
  // const appName = config.get("app.serviceName");
  // const cacheExpiry = config.get("app.cacheExpiry");
  // const caching = async (req, res, next) => {
  //   // Set up Cache Engine
  //   const cache = new EngineRedis();
  //   const apiCache = new CacheMan(appName, { engine: cache, ttl: cacheExpiry });
  //   req.cache = apiCache;
  //   res.set({ "Cache-Control": `private, max-age=${cacheExpiry}` });
  //   // Create Cache Key
  //   const key = [];
  //   key.push(req.url);
  //   key.push(req.ip);
  //   key.push(req.cookies);
  //   key.push(req.get("Content-Type"));
  //   req.cacheKey = key;
  //   if (req.method === "GET" && req.cacheKey) {
  //     const cacheResponse = await req.cache.get(req.cacheKey);
  //     if (cacheResponse) {
  //       return res.ok(cacheResponse, true);
  //     }
  //   }
  //   return next();
  // };
  router.use(
    express_1.default.urlencoded({
      extended: false,
      limit: bodyLimit,
    }),
  );
  router.use(
    express_1.default.json({
      limit: bodyLimit,
    }),
  );
  router.use(
    express_1.default.raw({
      limit: bodyLimit,
    }),
  );
  router.use(
    express_1.default.text({
      limit: bodyLimit,
    }),
  );
  // Setup CORS
  var allowedOrigins = config.get("app.allowedOrigins");
  router.use(
    (0, cors_1.default)({
      origin: function (origin, cb) {
        if (allowedOrigins.trim() === "*") {
          cb(null, true);
        } else {
          var origins = allowedOrigins.split(",");
          if (origins.indexOf(origin) !== -1 || !origin) {
            cb(null, true);
          } else {
            cb(new Error("Origin('".concat(origin, "') not allowed")), false);
          }
        }
      },
      optionsSuccessStatus: 200, // some legacy browsers (IE11, various SmartTVs) choke on 204
    }),
  );
  // Setup Caching
  // router.use(caching());
  // https://www.npmjs.com/package/awilix-express
  router.use(containerMiddleware);
  router.get("/", function (req, res) {
    return res.json({
      message: "Node_Clean",
    });
  });
  router.use("/v1", v1_1.default);
  router.use(notFoundHandler_1.default);
  router.use(errorHandler_1.default);
  return router;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
