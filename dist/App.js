"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
/**
 * Manages application interfaces e.g REST server, gRPC server
 */
var App = /** @class */ (function () {
  function App(_a) {
    var restServer = _a.restServer,
      logger = _a.logger,
      db = _a.db;
    this.restServer = restServer;
    this.logger = logger;
    this.db = db;
  }
  /**
   * Starts the application interfaces to begin handling user requests
   */
  App.prototype.start = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4 /*yield*/, this.db.connect()];
          case 1:
            _a.sent();
            return [4 /*yield*/, this.restServer.start()];
          case 2:
            _a.sent();
            return [2 /*return*/];
        }
      });
    });
  };
  /**
   * Closes the application's interfaces
   */
  App.prototype.shutdown = function () {
    var _this = this;
    this.restServer.close(function (err) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this.logger.info("Shutting down REST server");
              if (err) {
                this.logger.error("Error while shutting down server", {
                  error: err.toString(),
                });
              }
              return [4 /*yield*/, this.db.close()];
            case 1:
              _a.sent();
              process.exit(err ? 1 : 0);
              return [2 /*return*/];
          }
        });
      });
    });
  };

  return App;
})();
exports.default = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiQXBwIiwiX2EiLCJyZXN0U2VydmVyIiwibG9nZ2VyIiwiZGIiLCJwcm90b3R5cGUiLCJzdGFydCIsIl9fYXdhaXRlciIsIl9fZ2VuZXJhdG9yIiwibGFiZWwiLCJjb25uZWN0Iiwic2VudCIsInNodXRkb3duIiwiX3RoaXMiLCJjbG9zZSIsImVyciIsImluZm8iLCJlcnJvciIsInRvU3RyaW5nIiwicHJvY2VzcyIsImV4aXQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vdHlwZWQvQXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG4vKipcbiAqIE1hbmFnZXMgYXBwbGljYXRpb24gaW50ZXJmYWNlcyBlLmcgUkVTVCBzZXJ2ZXIsIGdSUEMgc2VydmVyXG4gKi9cbnZhciBBcHAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXBwKF9hKSB7XG4gICAgICAgIHZhciByZXN0U2VydmVyID0gX2EucmVzdFNlcnZlciwgbG9nZ2VyID0gX2EubG9nZ2VyLCBkYiA9IF9hLmRiO1xuICAgICAgICB0aGlzLnJlc3RTZXJ2ZXIgPSByZXN0U2VydmVyO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdGhlIGFwcGxpY2F0aW9uIGludGVyZmFjZXMgdG8gYmVnaW4gaGFuZGxpbmcgdXNlciByZXF1ZXN0c1xuICAgICAqL1xuICAgIEFwcC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZGIuY29ubmVjdCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZXN0U2VydmVyLnN0YXJ0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBhcHBsaWNhdGlvbidzIGludGVyZmFjZXNcbiAgICAgKi9cbiAgICBBcHAucHJvdG90eXBlLnNodXRkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnJlc3RTZXJ2ZXIuY2xvc2UoZnVuY3Rpb24gKGVycikgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJTaHV0dGluZyBkb3duIFJFU1Qgc2VydmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwiRXJyb3Igd2hpbGUgc2h1dHRpbmcgZG93biBzZXJ2ZXJcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmRiLmNsb3NlKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmV4aXQoZXJyID8gMSA6IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQXBwO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEFwcDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxHQUFHLEdBQUcsYUFBZSxZQUFZO0VBQ2pDLFNBQVNBLEdBQUcsQ0FBQ0MsRUFBRSxFQUFFO0lBQ2IsSUFBSUMs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
