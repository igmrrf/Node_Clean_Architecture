"use strict";

var fs = require("fs");
var path = require("path");
var folder = process.argv[2] || "";
var CFolder = process.argv[3] || "";
var routeContent = require("./data/route")(CFolder);
var repositoryContent = require("./data/repository")(CFolder);
var validationContent = require("./data/validation")(CFolder);
var entityContent = require("./data/entity")(CFolder);
var modelContent = require("./data/model")(CFolder);
var controllerContent = require("./data/controller")(CFolder);
var specContent = require("./data/spec")(CFolder);
var repositorySpecContent = require("./data/repository.spec")(CFolder);
var mockContent = require("./data/mockdata")(CFolder);
var createContent = require("./data/create")(CFolder);
var updateContent = require("./data/update")(CFolder);
var deleteContent = require("./data/delete")(CFolder);
var getOneContent = require("./data/getone")(CFolder);
var getContent = require("./data/getall")(CFolder);
function writeIntoFile(dir) {
  if (!dir) dir = path.join(process.cwd(), "src/containers/".concat(folder));
  fs.readdirSync(dir)
    .filter(function (file) {
      return file !== "index.js";
    })
    .forEach(function (file) {
      var content = null;
      if (fs.lstatSync("".concat(dir, "/").concat(file)).isDirectory())
        return writeIntoFile("".concat(dir, "/").concat(file));
      file = path.join(dir, file);
      if (file.includes("MOCK_DATA.js")) content = mockContent;
      else if (file.includes("".concat(CFolder, ".spec.js"))) content = specContent;
      else if (file.includes("".concat(CFolder, "Repository.spec.js"))) content = repositorySpecContent;
      else if (file.includes("Controller.js")) content = controllerContent;
      else if (file.includes("Entity.js")) content = entityContent;
      else if (file.includes("Model.js")) content = modelContent;
      else if (file.includes("Repository.js")) content = repositoryContent;
      else if (file.includes("Route.js")) content = routeContent;
      else if (file.includes("Validation.js")) content = validationContent;
      fs.writeFile(file, content, function (err) {
        if (err) {
          console.error(err);
          return;
        }
      });
    });
  dir = path.join(process.cwd(), "src/app/".concat(folder));
  fs.readdirSync(dir)
    .filter(function (file) {
      return file !== "index.js";
    })
    .forEach(function (file) {
      var content = null;
      file = path.join(dir, file);
      if (file.includes("Create".concat(CFolder, ".js"))) content = createContent;
      else if (file.includes("Update".concat(CFolder, ".js"))) content = updateContent;
      else if (file.includes("Delete".concat(CFolder, ".js"))) content = deleteContent;
      else if (file.includes("Get".concat(CFolder, ".js"))) content = getOneContent;
      else if (file.includes("Get".concat(CFolder, "s.js"))) content = getContent;
      fs.writeFile(file, content, function (err) {
        if (err) {
          console.error(err);
          return;
        }
      });
    });
}
writeIntoFile();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
