"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var MongoDBManager_1 = tslib_1.__importDefault(require("../base/database/MongoDBManager"));
var todos_json_1 = tslib_1.__importDefault(require("../base/database/seeders/todos.json"));
var logger_1 = tslib_1.__importDefault(require("../base/logger"));
var config_1 = tslib_1.__importDefault(require("../config"));
var TodoModel_1 = tslib_1.__importDefault(require("../containers/todos/TodoModel"));
var db = new MongoDBManager_1.default({
  config: config_1.default,
  logger: logger_1.default,
});
function createSampleTodos() {
  return tslib_1.__awaiter(this, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4 /*yield*/, TodoModel_1.default.create(todos_json_1.default)];
        case 1:
          _a.sent();
          logger_1.default.info("Finished creating sample todos");
          return [2 /*return*/];
      }
    });
  });
}

(function run() {
  return tslib_1.__awaiter(this, void 0, void 0, function () {
    var error_1;
    return tslib_1.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          logger_1.default.info("Running seed script");
          _a.label = 1;
        case 1:
          _a.trys.push([1, 5, , 6]);
          return [4 /*yield*/, db.connect()];
        case 2:
          _a.sent();
          return [4 /*yield*/, Promise.all([createSampleTodos()])];
        case 3:
          _a.sent();
          return [4 /*yield*/, db.close()];
        case 4:
          _a.sent();
          logger_1.default.info("Finished running seed script");
          return [3 /*break*/, 6];
        case 5:
          error_1 = _a.sent();
          logger_1.default.error("An error occurred while seeding the database", {
            error: error_1.message || error_1.toString(),
            stack: error_1.stack,
          });
          return [3 /*break*/, 6];
        case 6:
          return [2 /*return*/];
      }
    });
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiTW9uZ29EQk1hbmFnZXJfMSIsIl9faW1wb3J0RGVmYXVsdCIsInRvZG9zX2pzb25fMSIsImxvZ2dlcl8xIiwiY29uZmlnXzEiLCJUb2RvTW9kZWxfMSIsImRiIiwiZGVmYXVsdCIsImNvbmZpZyIsImxvZ2dlciIsImNyZWF0ZVNhbXBsZVRvZG9zIiwiX19hd2FpdGVyIiwiX19nZW5lcmF0b3IiLCJfYSIsImxhYmVsIiwiY3JlYXRlIiwic2VudCIsImluZm8iLCJydW4iLCJlcnJvcl8xIiwidHJ5cyIsInB1c2giLCJjb25uZWN0IiwiUHJvbWlzZSIsImFsbCIsImNsb3NlIiwiZXJyb3IiLCJtZXNzYWdlIiwidG9TdHJpbmciLCJzdGFjayJdLCJzb3VyY2VzIjpbIi4uLy4uL3R5cGVkL3NjcmlwdHMvc2VlZERiLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgTW9uZ29EQk1hbmFnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJiYXNlL2RhdGFiYXNlL01vbmdvREJNYW5hZ2VyXCIpKTtcbnZhciB0b2Rvc19qc29uXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYmFzZS9kYXRhYmFzZS9zZWVkZXJzL3RvZG9zLmpzb25cIikpO1xudmFyIGxvZ2dlcl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJhc2UvbG9nZ2VyXCIpKTtcbnZhciBjb25maWdfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjb25maWdcIikpO1xudmFyIFRvZG9Nb2RlbF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNvbnRhaW5lcnMvdG9kb3MvVG9kb01vZGVsXCIpKTtcbnZhciBkYiA9IG5ldyBNb25nb0RCTWFuYWdlcl8xLmRlZmF1bHQoeyBjb25maWc6IGNvbmZpZ18xLmRlZmF1bHQsIGxvZ2dlcjogbG9nZ2VyXzEuZGVmYXVsdCB9KTtcbmZ1bmN0aW9uIGNyZWF0ZVNhbXBsZVRvZG9zKCkge1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIFRvZG9Nb2RlbF8xLmRlZmF1bHQuY3JlYXRlKHRvZG9zX2pzb25fMS5kZWZhdWx0KV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuaW5mbyhcIkZpbmlzaGVkIGNyZWF0aW5nIHNhbXBsZSB0b2Rvc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbihmdW5jdGlvbiBydW4oKSB7XG4gICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlcnJvcl8xO1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlcl8xLmRlZmF1bHQuaW5mbyhcIlJ1bm5pbmcgc2VlZCBzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgNSwgLCA2XSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGRiLmNvbm5lY3QoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKFtjcmVhdGVTYW1wbGVUb2RvcygpXSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBkYi5jbG9zZSgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5pbmZvKFwiRmluaXNoZWQgcnVubmluZyBzZWVkIHNjcmlwdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXJfMS5kZWZhdWx0LmVycm9yKFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgc2VlZGluZyB0aGUgZGF0YWJhc2VcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXzEubWVzc2FnZSB8fCBlcnJvcl8xLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFjazogZXJyb3JfMS5zdGFjayxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pKCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3RCxJQUFJQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsSUFBSUMsZ0JBQWdCLEdBQUdGLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLG1DQUFnQyxDQUFDO0FBQ3ZGLElBQUlHLFlBQVksR0FBR0osT0FBTyxDQUFDRyxlQUFlLENBQUNGLE9BQU8sdUNBQW9DLENBQUM7QUFDdkYsSUFBSUksUUFBUSxHQUFHTCxPQUFPLENBQUNHLGVBQWUsQ0FBQ0YsT0FBTyxrQkFBZSxDQUFDO0FBQzlELElBQUlLLFFBQVEsR0FBR04sT0FBTyxDQUFDRyxlQUFlLENBQUNGLE9BQU8sYUFBVSxDQUFDO0FBQ3pELElBQUlNLFdBQVcsR0FBR1AsT0FBTyxDQUFDRyxlQUFlLENBQUNGLE9BQU8saUNBQThCLENBQUM7QUFDaEYsSUFBSU8sRUFBRSxHQUFHLElBQUlOLGdCQUFnQixDQUFDTyxPQUFPLENBQUM7RUFBRUMsTUFBTSxFQUFFSixRQUFRLENBQUNHLE9BQU87RUFBRUUsTUFBTSxFQUFFTixRQUFRLENBQUNJO0FBQVEsQ0FBQyxDQUFDO0FBQzdGLFNBQVNHLGlCQUFpQixHQUFHO0VBQ3pCLE9BQU9aLE9BQU8sQ0FBQ2EsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxZQUFZO0lBQ3ZELE9BQU9i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
