"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var axios_1 = tslib_1.__importDefault(require("axios"));
var logger_1 = tslib_1.__importDefault(require("../base/logger"));
var BadGatewayError_1 = tslib_1.__importDefault(require("../interfaces/rest/errors/BadGatewayError"));
var InvalidPayloadError_1 = tslib_1.__importDefault(require("../interfaces/rest/errors/InvalidPayloadError"));
var Paystack = /** @class */ (function () {
  function Paystack(_a) {
    var config = _a.config;
    var paystackUrl = config.get("paystack.paystackBaseUrl");
    var paystackSK = config.get("paystack.paystackSK");
    var httpClient = axios_1.default.create({
      baseURL: paystackUrl,
      headers: {
        Authorization: "Bearer ".concat(paystackSK),
      },
    });
    this.httpClient = httpClient;
    this.paystackUrl = paystackUrl;
    this.paystackSK = paystackSK;
  }
  Paystack.prototype.verifyPayment = function (reference) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var response, error_1;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4 /*yield*/, this.httpClient.get("/transaction/verify/".concat(reference))];
          case 1:
            response = _a.sent();
            return [2 /*return*/, response.data.data];
          case 2:
            error_1 = _a.sent();
            logger_1.default.error("An error occurred while verifying payment", {
              error: error_1.toString(),
            });
            if (error_1.response && error_1.response.status === 400) {
              throw new InvalidPayloadError_1.default(error_1.response.data.message);
            }
            throw new BadGatewayError_1.default("Could not verify payment at the moment. Please try again later");
          case 3:
            return [2 /*return*/];
        }
      });
    });
  };

  return Paystack;
})();
exports.default = Paystack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiYXhpb3NfMSIsIl9faW1wb3J0RGVmYXVsdCIsImxvZ2dlcl8xIiwiQmFkR2F0ZXdheUVycm9yXzEiLCJJbnZhbGlkUGF5bG9hZEVycm9yXzEiLCJQYXlzdGFjayIsIl9hIiwiY29uZmlnIiwicGF5c3RhY2tVcmwiLCJnZXQiLCJwYXlzdGFja1NLIiwiaHR0cENsaWVudCIsImRlZmF1bHQiLCJjcmVhdGUiLCJiYXNlVVJMIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJjb25jYXQiLCJwcm90b3R5cGUiLCJ2ZXJpZnlQYXltZW50IiwicmVmZXJlbmNlIiwiX19hd2FpdGVyIiwicmVzcG9uc2UiLCJlcnJvcl8xIiwiX19nZW5lcmF0b3IiLCJsYWJlbCIsInRyeXMiLCJwdXNoIiwic2VudCIsImRhdGEiLCJlcnJvciIsInRvU3RyaW5nIiwic3RhdHVzIiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3R5cGVkL21vZHVsZXMvcGF5bWVudC5tb2R1bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBheGlvc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcbnZhciBsb2dnZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJiYXNlL2xvZ2dlclwiKSk7XG52YXIgQmFkR2F0ZXdheUVycm9yXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiaW50ZXJmYWNlcy9yZXN0L2Vycm9ycy9CYWRHYXRld2F5RXJyb3JcIikpO1xudmFyIEludmFsaWRQYXlsb2FkRXJyb3JfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJpbnRlcmZhY2VzL3Jlc3QvZXJyb3JzL0ludmFsaWRQYXlsb2FkRXJyb3JcIikpO1xudmFyIFBheXN0YWNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBheXN0YWNrKF9hKSB7XG4gICAgICAgIHZhciBjb25maWcgPSBfYS5jb25maWc7XG4gICAgICAgIHZhciBwYXlzdGFja1VybCA9IGNvbmZpZy5nZXQoXCJwYXlzdGFjay5wYXlzdGFja0Jhc2VVcmxcIik7XG4gICAgICAgIHZhciBwYXlzdGFja1NLID0gY29uZmlnLmdldChcInBheXN0YWNrLnBheXN0YWNrU0tcIik7XG4gICAgICAgIHZhciBodHRwQ2xpZW50ID0gYXhpb3NfMS5kZWZhdWx0LmNyZWF0ZSh7XG4gICAgICAgICAgICBiYXNlVVJMOiBwYXlzdGFja1VybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBcIkJlYXJlciBcIi5jb25jYXQocGF5c3RhY2tTSyksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcbiAgICAgICAgdGhpcy5wYXlzdGFja1VybCA9IHBheXN0YWNrVXJsO1xuICAgICAgICB0aGlzLnBheXN0YWNrU0sgPSBwYXlzdGFja1NLO1xuICAgIH1cbiAgICBQYXlzdGFjay5wcm90b3R5cGUudmVyaWZ5UGF5bWVudCA9IGZ1bmN0aW9uIChyZWZlcmVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UsIGVycm9yXzE7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMCwgMiwgLCAzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHBDbGllbnQuZ2V0KFwiL3RyYW5zYWN0aW9uL3ZlcmlmeS9cIi5jb25jYXQocmVmZXJlbmNlKSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXNwb25zZS5kYXRhLmRhdGFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyXzEuZGVmYXVsdC5lcnJvcihcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHZlcmlmeWluZyBwYXltZW50XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JfMS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JfMS5yZXNwb25zZSAmJiBlcnJvcl8xLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRQYXlsb2FkRXJyb3JfMS5kZWZhdWx0KGVycm9yXzEucmVzcG9uc2UuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCYWRHYXRld2F5RXJyb3JfMS5kZWZhdWx0KFwiQ291bGQgbm90IHZlcmlmeSBwYXltZW50IGF0IHRoZSBtb21lbnQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBQYXlzdGFjaztcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBQYXlzdGFjaztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixJQUFJQyxPQUFPLEdBQUdGLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkQsSUFBSUcsUUFBUSxHQUFHSixPQUFPLENBQUNHLGVBQWUsQ0FBQ0YsT0FBTyxrQkFBZSxDQUFDO0FBQzlELElBQUlJLGlCQUFpQixHQUFHTCxPQUFPLENBQUNHLGVBQWUsQ0FBQ0YsT0FBTyw2Q0FBMEMsQ0FBQztBQUNsRyxJQUFJSyxxQkFBcUIsR0FBR04sT0FBTyxDQUFDRyxlQUFlLENBQUNGLE9BQU8saURBQThDLENBQUM7QUFDMUcsSUFBSU0sUUFBUSxHQUFHLGFBQWUsWUFBWTtFQUN0QyxTQUFTQSxRQUFRLENBQUNDLEVBQUUsRUFBRTtJQUNsQixJQUFJQyxNQUFNLEdBQUdELEVBQUUsQ0FBQ0MsTUFBTTtJQUN0QixJQUFJQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0UsR0FBRyxDQUFDLDBCQUEwQixDQUFDO0lBQ3hELElBQUlDLFVBQVUsR0FBR0gsTUFBTSxDQUFDRSxHQUFHLENBQUMscUJBQXFCLENBQUM7SUFDbEQsSUFBSUUsVUFBVSxHQUFHWCxPQUFPLENBQUNZLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDO01BQ3BDQyxPQUFPLEVBQUVOLFdBQVc7TUFDcEJPLE9BQU8sRUFBRTtRQUNMQyxhQUFhLEVBQUUsU0FBUyxDQUFDQyxNQUFNLENBQUNQLFVBQVU7TUFDOUM7SUFDSixDQUFDLENBQUM7SUFDRixJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTtJQUM1QixJQUFJLENBQUNILFdBQVcsR0FBR0EsV0FBVztJQUM5QixJQUFJLENBQUNFLFVBQVUsR0FBR0EsVUFBVTtFQUNoQztFQUNBTCxRQUFRLENBQUNhLFNBQVMsQ0FBQ0MsYUFBYSxHQUFHLFVBQVVDLFNBQVMsRUFBRTtJQUNwRCxPQUFPdEIsT0FBTyxDQUFDdUIsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxZQUFZO01BQ3ZELElBQUlDLFFBQVEsRUFBRUMsT0FBTztNQUNyQixPQUFPekIsT0FBTyxDQUFDMEIsV0FBVyxDQUFDLElBQUksRUFBRSxVQUFVbEIsRUFBRSxFQUFFO1FBQzNDLFFBQVFBLEVBQUUsQ0FBQ21CLEtBQUs7VUFDWixLQUFLLENBQUM7WUFDRm5CLEVBQUUsQ0FBQ29CLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBSSxDQUFDLENBQUMsQ0FBQztZQUN6QixPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDaEIsVUFBVSxDQUFDRixHQUFHLENBQUMsc0JBQXNCLENBQUNRLE1BQU0sQ0FBQ0csU0FBUyxDQUFDLENBQUMsQ0FBQztVQUN2RixLQUFLLENBQUM7WUFDRkUsUUFBUSxHQUFHaEIsRUFBRSxDQUFDc0IsSUFBSSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWU4sUUFBUSxDQUFDTyxJQUFJLENBQUNBLElBQUksQ0FBQztVQUM3QyxLQUFLLENBQUM7WUFDRk4sT0FBTyxHQUFHakIsRUFBRSxDQUFDc0IsSUFBSSxFQUFFO1lBQ25CMUIsUUFBUSxDQUFDVSxPQUFPLENBQUNrQixLQUFLLENBQUMsMkNBQTJDLEVBQUU7Y0FDaEVBLEtBQUssRUFBRVAsT0FBTyxDQUFDUSxRQUFRO1lBQzNCLENBQUMsQ0FBQztZQUNGLElBQUlSLE9BQU8sQ0FBQ0QsUUFBUSxJQUFJQyxPQUFPLENBQUNELFFBQVEsQ0FBQ1UsTUFBTSxLQUFLLEdBQUcsRUFBRTtjQUNyRCxNQUFNLElBQUk1QixxQkFBcUIsQ0FBQ1EsT0FBTyxDQUFDVyxPQUFPLENBQUNELFFBQVEsQ0FBQ08sSUFBSSxDQUFDSSxPQUFPLENBQUM7WUFDMUU7WUFDQSxNQUFNLElBQUk5QixpQkFBaUIsQ0FBQ1MsT0FBTyxDQUFDLGdFQUFnRSxDQUFDO1VBQ3pHLEtBQUssQ0FBQztZQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVztRQUFDO01BRXRDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUNOLENBQUM7O0VBQ0QsT0FBT1AsUUFBUTtBQUNuQixDQUFDLEVBQUc7QUFDSlQsT0FBTyxDQUFDZ0IsT0FBTyxHQUFHUCxRQUFRIn0=
