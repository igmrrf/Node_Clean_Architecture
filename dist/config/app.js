"use strict";

/**
 * Application specific configuration
 */
var config = {
  serviceName: {
    doc: "Application name",
    format: "*",
    default: null,
    env: "SERVICE_NAME",
    sensitive: false,
  },
  serviceVersion: {
    doc: "Application version",
    format: "*",
    default: 1.0,
    sensitive: false,
  },
  httpPort: {
    doc: "The REST port to bind",
    format: "port",
    default: 14516,
    env: "PORT",
    sensitive: false,
  },
  bodyLimit: {
    doc: "The maximum size of request bodies (json)",
    format: "*",
    default: "10mb",
    env: "BODY_LIMIT",
    sensitive: false,
  },
  apiVersion: {
    doc: "The API version",
    format: "*",
    default: "v1",
    env: "API_VERSION",
    sensitive: false,
  },
  env: {
    doc: "The application environment",
    format: ["production", "development", "test"],
    default: "development",
    env: "NODE_ENV",
    sensitive: false,
  },
  allowedOrigins: {
    doc: "Allowed origins for CORS",
    format: "*",
    default: "*",
    env: "ALLOWED_ORIGINS",
    sensitive: false,
  },
  jwtSecret: {
    doc: "Secret key for signing JWT",
    format: "*",
    default: null,
    env: "JWT_SECRET",
    sensitive: true,
  },
  jwtIssuer: {
    doc: "JWT Issuer",
    format: "*",
    default: "http://letscollabo.live/",
    env: "JWT_ISSUER",
    sensitive: false,
  },
  jwtAudience: {
    doc: "JWT Audience",
    format: "*",
    default: "http://letscollabo.live/",
    env: "JWT_AUDIENCE",
    sensitive: false,
  },
  frontendBasUrl: {
    doc: "Frontend base url",
    format: "*",
    default: "http://letscollabo.live/",
    env: "FRONTEND_BASE_URL",
    sensitive: false,
  },
  cacheExpiry: {
    doc: "Cache expiry",
    format: "*",
    default: 3600,
    env: "CACHE_EXPIRY",
    sensitive: false,
  },
};
exports.app = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25maWciLCJzZXJ2aWNlTmFtZSIsImRvYyIsImZvcm1hdCIsImRlZmF1bHQiLCJlbnYiLCJzZW5zaXRpdmUiLCJzZXJ2aWNlVmVyc2lvbiIsImh0dHBQb3J0IiwiYm9keUxpbWl0IiwiYXBpVmVyc2lvbiIsImFsbG93ZWRPcmlnaW5zIiwiand0U2VjcmV0Iiwiand0SXNzdWVyIiwiand0QXVkaWVuY2UiLCJmcm9udGVuZEJhc1VybCIsImNhY2hlRXhwaXJ5IiwiZXhwb3J0cyIsImFwcCJdLCJzb3VyY2VzIjpbIi4uLy4uL3R5cGVkL2NvbmZpZy9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEFwcGxpY2F0aW9uIHNwZWNpZmljIGNvbmZpZ3VyYXRpb25cbiAqL1xudmFyIGNvbmZpZyA9IHtcbiAgICBzZXJ2aWNlTmFtZToge1xuICAgICAgICBkb2M6IFwiQXBwbGljYXRpb24gbmFtZVwiLFxuICAgICAgICBmb3JtYXQ6IFwiKlwiLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICBlbnY6IFwiU0VSVklDRV9OQU1FXCIsXG4gICAgICAgIHNlbnNpdGl2ZTogZmFsc2UsXG4gICAgfSxcbiAgICBzZXJ2aWNlVmVyc2lvbjoge1xuICAgICAgICBkb2M6IFwiQXBwbGljYXRpb24gdmVyc2lvblwiLFxuICAgICAgICBmb3JtYXQ6IFwiKlwiLFxuICAgICAgICBkZWZhdWx0OiAxLjAsXG4gICAgICAgIHNlbnNpdGl2ZTogZmFsc2UsXG4gICAgfSxcbiAgICBodHRwUG9ydDoge1xuICAgICAgICBkb2M6IFwiVGhlIFJFU1QgcG9ydCB0byBiaW5kXCIsXG4gICAgICAgIGZvcm1hdDogXCJwb3J0XCIsXG4gICAgICAgIGRlZmF1bHQ6IDE0NTE2LFxuICAgICAgICBlbnY6IFwiUE9SVFwiLFxuICAgICAgICBzZW5zaXRpdmU6IGZhbHNlLFxuICAgIH0sXG4gICAgYm9keUxpbWl0OiB7XG4gICAgICAgIGRvYzogXCJUaGUgbWF4aW11bSBzaXplIG9mIHJlcXVlc3QgYm9kaWVzIChqc29uKVwiLFxuICAgICAgICBmb3JtYXQ6IFwiKlwiLFxuICAgICAgICBkZWZhdWx0OiBcIjEwbWJcIixcbiAgICAgICAgZW52OiBcIkJPRFlfTElNSVRcIixcbiAgICAgICAgc2Vuc2l0aXZlOiBmYWxzZSxcbiAgICB9LFxuICAgIGFwaVZlcnNpb246IHtcbiAgICAgICAgZG9jOiBcIlRoZSBBUEkgdmVyc2lvblwiLFxuICAgICAgICBmb3JtYXQ6IFwiKlwiLFxuICAgICAgICBkZWZhdWx0OiBcInYxXCIsXG4gICAgICAgIGVudjogXCJBUElfVkVSU0lPTlwiLFxuICAgICAgICBzZW5zaXRpdmU6IGZhbHNlLFxuICAgIH0sXG4gICAgZW52OiB7XG4gICAgICAgIGRvYzogXCJUaGUgYXBwbGljYXRpb24gZW52aXJvbm1lbnRcIixcbiAgICAgICAgZm9ybWF0OiBbXCJwcm9kdWN0aW9uXCIsIFwiZGV2ZWxvcG1lbnRcIiwgXCJ0ZXN0XCJdLFxuICAgICAgICBkZWZhdWx0OiBcImRldmVsb3BtZW50XCIsXG4gICAgICAgIGVudjogXCJOT0RFX0VOVlwiLFxuICAgICAgICBzZW5zaXRpdmU6IGZhbHNlLFxuICAgIH0sXG4gICAgYWxsb3dlZE9yaWdpbnM6IHtcbiAgICAgICAgZG9jOiBcIkFsbG93ZWQgb3JpZ2lucyBmb3IgQ09SU1wiLFxuICAgICAgICBmb3JtYXQ6IFwiKlwiLFxuICAgICAgICBkZWZhdWx0OiBcIipcIixcbiAgICAgICAgZW52OiBcIkFMTE9XRURfT1JJR0lOU1wiLFxuICAgICAgICBzZW5zaXRpdmU6IGZhbHNlLFxuICAgIH0sXG4gICAgand0U2VjcmV0OiB7XG4gICAgICAgIGRvYzogXCJTZWNyZXQga2V5IGZvciBzaWduaW5nIEpXVFwiLFxuICAgICAgICBmb3JtYXQ6IFwiKlwiLFxuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICBlbnY6IFwiSldUX1NFQ1JFVFwiLFxuICAgICAgICBzZW5zaXRpdmU6IHRydWUsXG4gICAgfSxcbiAgICBqd3RJc3N1ZXI6IHtcbiAgICAgICAgZG9jOiBcIkpXVCBJc3N1ZXJcIixcbiAgICAgICAgZm9ybWF0OiBcIipcIixcbiAgICAgICAgZGVmYXVsdDogXCJodHRwOi8vbGV0c2NvbGxhYm8ubGl2ZS9cIixcbiAgICAgICAgZW52OiBcIkpXVF9JU1NVRVJcIixcbiAgICAgICAgc2Vuc2l0aXZlOiBmYWxzZSxcbiAgICB9LFxuICAgIGp3dEF1ZGllbmNlOiB7XG4gICAgICAgIGRvYzogXCJKV1QgQXVkaWVuY2VcIixcbiAgICAgICAgZm9ybWF0OiBcIipcIixcbiAgICAgICAgZGVmYXVsdDogXCJodHRwOi8vbGV0c2NvbGxhYm8ubGl2ZS9cIixcbiAgICAgICAgZW52OiBcIkpXVF9BVURJRU5DRVwiLFxuICAgICAgICBzZW5zaXRpdmU6IGZhbHNlLFxuICAgIH0sXG4gICAgZnJvbnRlbmRCYXNVcmw6IHtcbiAgICAgICAgZG9jOiBcIkZyb250ZW5kIGJhc2UgdXJsXCIsXG4gICAgICAgIGZvcm1hdDogXCIqXCIsXG4gICAgICAgIGRlZmF1bHQ6IFwiaHR0cDovL2xldHNjb2xsYWJvLmxpdmUvXCIsXG4gICAgICAgIGVudjogXCJGUk9OVEVORF9CQVNFX1VSTFwiLFxuICAgICAgICBzZW5zaXRpdmU6IGZhbHNlLFxuICAgIH0sXG4gICAgY2FjaGVFeHBpcnk6IHtcbiAgICAgICAgZG9jOiBcIkNhY2hlIGV4cGlyeVwiLFxuICAgICAgICBmb3JtYXQ6IFwiKlwiLFxuICAgICAgICBkZWZhdWx0OiAzNjAwLFxuICAgICAgICBlbnY6IFwiQ0FDSEVfRVhQSVJZXCIsXG4gICAgICAgIHNlbnNpdGl2ZTogZmFsc2UsXG4gICAgfSxcbn07XG5leHBvcnRzLmFwcCA9IGNvbmZpZztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWjtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxNQUFNLEdBQUc7RUFDVEMsV0FBVyxFQUFFO0lBQ1RDLEdBQUcsRUFBRSxrQkFBa0I7SUFDdkJDLE1B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
