"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var ResourceNotFoundError_1 = tslib_1.__importDefault(
  require("../../interfaces/rest/errors/ResourceNotFoundError"),
);
var ConflictError_1 = tslib_1.__importDefault(require("../../interfaces/rest/errors/ConflictError"));
var repositories_1 = tslib_1.__importDefault(require("../../base/repositories"));
var TodoRepository = /** @class */ (function (_super) {
  tslib_1.__extends(TodoRepository, _super);
  function TodoRepository(_a) {
    var Todo = _a.models.Todo,
      currentUser = _a.currentUser;
    var _this =
      _super.call(this, {
        Model: Todo,
      }) || this;
    _this.Todo = Todo;
    _this.currentUser = currentUser;
    return _this;
  }
  TodoRepository.prototype.create = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingTodo, newTodo;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!payload.title) return [3 /*break*/, 2];
            return [
              4 /*yield*/,
              this.find(
                {
                  title: payload.title,
                },
                undefined,
                {
                  lean: true,
                },
              ),
            ];
          case 1:
            existingTodo = _a.sent();
            if (existingTodo) {
              throw new ConflictError_1.default("Todo already exists");
            }
            _a.label = 2;
          case 2:
            return [
              4 /*yield*/,
              this.createDoc(
                tslib_1.__assign(tslib_1.__assign({}, payload), {
                  created_by: this.currentUser._id,
                }),
              ),
            ];
          case 3:
            newTodo = _a.sent();
            return [2 /*return*/, newTodo.getPublicFields()];
        }
      });
    });
  };
  TodoRepository.prototype.update = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingTodo, newTodo;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.findById(payload._id, undefined, {
                lean: true,
              }),
            ];
          case 1:
            existingTodo = _a.sent();
            if (!existingTodo) {
              throw new ResourceNotFoundError_1.default("Todo not found");
            }
            return [
              4 /*yield*/,
              this.findOneAndUpdate(
                {
                  _id: payload._id,
                },
                tslib_1.__assign({}, payload),
                {
                  new: true,
                },
              ),
            ];
          case 2:
            newTodo = _a.sent();
            return [2 /*return*/, newTodo.getPublicFields()];
        }
      });
    });
  };
  TodoRepository.prototype.delete = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingTodo, removeTodo;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.findById(payload._id, undefined, {
                lean: true,
              }),
            ];
          case 1:
            existingTodo = _a.sent();
            if (!existingTodo) {
              throw new ResourceNotFoundError_1.default("Todo not found");
            }
            return [
              4 /*yield*/,
              this.findOneAndDelete({
                _id: payload._id,
              }),
            ];
          case 2:
            removeTodo = _a.sent();
            return [2 /*return*/, removeTodo.getPublicFields()];
        }
      });
    });
  };
  TodoRepository.prototype.get = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingTodos;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.find(
                {},
                undefined,
                {
                  lean: true,
                },
                true,
              ),
            ];
          case 1:
            existingTodos = _a.sent();
            return [2 /*return*/, existingTodos];
        }
      });
    });
  };
  TodoRepository.prototype.getOne = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingTodo, getTodo;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.findById(payload._id, undefined, {
                lean: true,
              }),
            ];
          case 1:
            existingTodo = _a.sent();
            if (!existingTodo) {
              throw new ResourceNotFoundError_1.default("Todo not found");
            }
            return [
              4 /*yield*/,
              this.find(
                {
                  _id: payload._id,
                },
                undefined,
                {
                  lean: true,
                },
              ),
            ];
          case 2:
            getTodo = _a.sent();
            return [2 /*return*/, getTodo];
        }
      });
    });
  };
  return TodoRepository;
})(repositories_1.default);
exports.default = TodoRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
