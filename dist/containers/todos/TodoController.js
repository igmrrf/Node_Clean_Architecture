"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var controllers_1 = tslib_1.__importDefault(require("../../interfaces/rest/controllers"));
var lodash_1 = require("lodash");
var TodoController = /** @class */ (function (_super) {
  tslib_1.__extends(TodoController, _super);
  function TodoController(_a) {
    var createTodo = _a.createTodo,
      updateTodo = _a.updateTodo,
      deleteTodo = _a.deleteTodo,
      getTodo = _a.getTodo,
      getTodos = _a.getTodos;
    var _this = _super.call(this) || this;
    _this.create = createTodo;
    _this.update = updateTodo;
    _this.delete = deleteTodo;
    _this.getOne = getTodo;
    _this.get = getTodos;
    _this.allowedPayloads = ["value", "anotherValue"];
    return _this;
  }
  TodoController.prototype.createTodo = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            payload = (0, lodash_1.pick)(req.body, this.allowedPayloads);
            return [4 /*yield*/, this.create.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "Todo added successfully"),
            ];
        }
      });
    });
  };
  TodoController.prototype.updateTodo = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _id, body, payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _id = (0, lodash_1.pick)(req.params, ["id"]).id;
            body = (0, lodash_1.pick)(req.body, ["", ""]);
            payload = tslib_1.__assign(tslib_1.__assign({}, body), {
              _id: _id,
            });
            return [4 /*yield*/, this.update.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "Todo udpated successfully"),
            ];
        }
      });
    });
  };
  TodoController.prototype.deleteTodo = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _id, payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _id = (0, lodash_1.pick)(req.params, ["id"]).id;
            payload = {
              _id: _id,
            };
            return [4 /*yield*/, this.delete.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "Todo deleted successfully!"),
            ];
        }
      });
    });
  };
  TodoController.prototype.getTodos = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4 /*yield*/, this.get.execute()];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "Todo(s) fetched successfully!"),
            ];
        }
      });
    });
  };
  TodoController.prototype.getTodo = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _id, payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _id = (0, lodash_1.pick)(req.params, ["id"]).id;
            payload = {
              _id: _id,
            };
            return [4 /*yield*/, this.getOne.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "Todo fetched successfully!"),
            ];
        }
      });
    });
  };
  return TodoController;
})(controllers_1.default);
exports.default = TodoController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
