"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
/* eslint-disable no-param-reassign */
var Stripe_1 = tslib_1.__importDefault(require("../../base/payments/Stripe"));
var repositories_1 = tslib_1.__importDefault(require("../../base/repositories"));
var config_1 = tslib_1.__importDefault(require("../../config"));
var jwt_1 = tslib_1.__importDefault(require("../../helpers/jwt"));
var password_1 = tslib_1.__importDefault(require("../../helpers/password"));
var ConflictError_1 = tslib_1.__importDefault(require("../../interfaces/rest/errors/ConflictError"));
var ResourceNotFoundError_1 = tslib_1.__importDefault(
  require("../../interfaces/rest/errors/ResourceNotFoundError"),
);
var lodash_1 = require("lodash");
var UserRepository = /** @class */ (function (_super) {
  tslib_1.__extends(UserRepository, _super);
  function UserRepository(_a) {
    var User = _a.models.User,
      currentUser = _a.currentUser;
    var _this =
      _super.call(this, {
        Model: User,
      }) || this;
    _this.User = User;
    _this.currentUser = currentUser;
    return _this;
  }
  UserRepository.prototype.create = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var email,
        discord,
        twitter,
        existingUserName,
        newUser_1,
        stripe,
        stripe_customer,
        newUser,
        referred,
        referrer,
        referredCoupon;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            (email = payload.email), (discord = payload.discord), (twitter = payload.twitter);
            return [
              4 /*yield*/,
              this.find(
                {
                  username: payload.username,
                },
                undefined,
                {
                  lean: true,
                },
                false,
              ),
            ];
          case 1:
            existingUserName = _a.sent();
            if (existingUserName) {
              payload.username += (0, lodash_1.random)(999);
            }
            if (!(process.env.NODE_ENV === "test")) return [3 /*break*/, 3];
            return [
              4 /*yield*/,
              this.createDoc({
                username: payload.username,
                email: email,
                discord: discord,
                twitter: twitter,
                coupons: payload.coupons,
              }),
            ];
          case 2:
            newUser_1 = _a.sent();
            return [2 /*return*/, newUser_1.getPublicFields()];
          case 3:
            stripe = new Stripe_1.default({
              config: config_1.default,
            });
            return [
              4 /*yield*/,
              stripe.createAccount({
                email: payload.email,
                name: payload.first_name,
              }),
            ];
          case 4:
            stripe_customer = _a.sent();
            return [
              4 /*yield*/,
              this.createDoc({
                stripe_customer: stripe_customer,
                username: payload.username,
                email: email,
                discord: discord,
                twitter: twitter,
                coupons: payload.coupons,
              }),
            ];
          case 5:
            newUser = _a.sent();
            return [
              4 /*yield*/,
              this.Refer.findOne(
                {
                  email: email,
                },
                undefined,
                {
                  lean: true,
                },
              ),
            ];
          case 6:
            referred = _a.sent();
            if (!referred) return [3 /*break*/, 8];
            return [4 /*yield*/, this.findById(referred.referred_by)];
          case 7:
            referrer = _a.sent();
            _a.label = 8;
          case 8:
            if (!referrer) return [3 /*break*/, 10];
            return [
              4 /*yield*/,
              this.findOneAndUpdate(
                {
                  email: referrer.email,
                  _id: referrer._id,
                },
                {
                  $push: {
                    referrals: newUser._id,
                  },
                },
                {
                  new: true,
                },
              ),
            ];
          case 9:
            _a.sent();
            _a.label = 10;
          case 10:
            referredCoupon = {
              code: "FREE_REFER",
              percent: 100,
              campaign: "REFERRAL",
              used: false,
            };
            return [
              4 /*yield*/,
              this.findOneAndUpdate(
                {
                  _id: newUser._id,
                },
                {
                  $push: {
                    coupons: referredCoupon,
                  },
                },
              ),
            ];
          case 11:
            _a.sent();
            return [2 /*return*/, newUser.getPublicFields()];
        }
      });
    });
  };
  UserRepository.prototype.login = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var user, valid, token;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.find(
                {
                  username: payload.username,
                },
                undefined,
                {
                  lean: false,
                },
                false,
              ),
            ];
          case 1:
            user = _a.sent();
            if (!user) {
              throw new ResourceNotFoundError_1.default("No user with username found");
            }
            valid = password_1.default.compare(payload.password, user.password);
            if (!valid) {
              return [2 /*return*/, new ConflictError_1.default("Invalid Password and user detail combination")];
            }
            token = jwt_1.default.generate({
              userId: user._id,
              type: user.type,
            });
            return [
              2 /*return*/,
              {
                token: token,
                user: user.getPublicFields(),
              },
            ];
        }
      });
    });
  };
  UserRepository.prototype.update = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingUser, newUser;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.findById(payload._id, undefined, {
                lean: true,
              }),
            ];
          case 1:
            existingUser = _a.sent();
            if (!existingUser) {
              throw new ResourceNotFoundError_1.default("User not found");
            }
            return [
              4 /*yield*/,
              this.findOneAndUpdate(
                {
                  _id: payload._id,
                },
                tslib_1.__assign({}, payload),
                {
                  new: true,
                },
              ),
            ];
          case 2:
            newUser = _a.sent();
            return [2 /*return*/, newUser.getPublicFields()];
        }
      });
    });
  };
  UserRepository.prototype.delete = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingUser, removeUser;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.findById(payload._id, undefined, {
                lean: true,
              }),
            ];
          case 1:
            existingUser = _a.sent();
            if (!existingUser) {
              throw new ResourceNotFoundError_1.default("User not found");
            }
            return [
              4 /*yield*/,
              this.findOneAndDelete({
                _id: payload._id,
              }),
            ];
          case 2:
            removeUser = _a.sent();
            return [2 /*return*/, removeUser.getPublicFields()];
        }
      });
    });
  };
  UserRepository.prototype.get = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingUsers;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.find(
                {},
                undefined,
                {
                  lean: true,
                },
                true,
              ),
            ];
          case 1:
            existingUsers = _a.sent();
            return [2 /*return*/, existingUsers];
        }
      });
    });
  };
  UserRepository.prototype.getOne = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingUser, getUser;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.findById(payload._id, undefined, {
                lean: true,
              }),
            ];
          case 1:
            existingUser = _a.sent();
            if (!existingUser) {
              throw new ResourceNotFoundError_1.default("User not found");
            }
            return [
              4 /*yield*/,
              this.find(
                {
                  _id: payload._id,
                },
                undefined,
                {
                  lean: true,
                },
              ),
            ];
          case 2:
            getUser = _a.sent();
            return [2 /*return*/, getUser];
        }
      });
    });
  };
  return UserRepository;
})(repositories_1.default);
exports.default = UserRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiU3RyaXBlXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXBvc2l0b3JpZXNfMSIsImNvbmZpZ18xIiwiand0XzEiLCJwYXNzd29yZF8xIiwiQ29uZmxpY3RFcnJvcl8xIiwiUmVzb3VyY2VOb3RGb3VuZEVycm9yXzEiLCJsb2Rhc2hfMSIsIlVzZXJSZXBvc2l0b3J5IiwiX3N1cGVyIiwiX19leHRlbmRzIiwiX2EiLCJVc2VyIiwibW9kZWxzIiwiY3VycmVudFVzZXIiLCJfdGhpcyIsImNhbGwiLCJNb2RlbCIsInByb3RvdHlwZSIsImNyZWF0ZSIsInBheWxvYWQiLCJfX2F3YWl0ZXIiLCJlbWFpbCIsImRpc2NvcmQiLCJ0d2l0dGVyIiwiZXhpc3RpbmdVc2VyTmFtZSIsIm5ld1VzZXJfMSIsInN0cmlwZSIsInN0cmlwZV9jdXN0b21lciIsIm5ld1VzZXIiLCJyZWZlcnJlZCIsInJlZmVycmVyIiwicmVmZXJyZWRDb3Vwb24iLCJfX2dlbmVyYXRvciIsImxhYmVsIiwiZmluZCIsInVzZXJuYW1lIiwidW5kZWZpbmVkIiwibGVhbiIsInNlbnQiLCJyYW5kb20iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJjcmVhdGVEb2MiLCJjb3Vwb25zIiwiZ2V0UHVibGljRmllbGRzIiwiZGVmYXVsdCIsImNvbmZpZyIsImNyZWF0ZUFjY291bnQiLCJuYW1lIiwiZmlyc3RfbmFtZSIsIlJlZmVyIiwiZmluZE9uZSIsImZpbmRCeUlkIiwicmVmZXJyZWRfYnkiLCJmaW5kT25lQW5kVXBkYXRlIiwiX2lkIiwiJHB1c2giLCJyZWZlcnJhbHMiLCJuZXciLCJjb2RlIiwicGVyY2VudCIsImNhbXBhaWduIiwidXNlZCIsImxvZ2luIiwidXNlciIsInZhbGlkIiwidG9rZW4iLCJjb21wYXJlIiwicGFzc3dvcmQiLCJnZW5lcmF0ZSIsInVzZXJJZCIsInR5cGUiLCJ1cGRhdGUiLCJleGlzdGluZ1VzZXIiLCJfX2Fzc2lnbiIsImRlbGV0ZSIsInJlbW92ZVVzZXIiLCJmaW5kT25lQW5kRGVsZXRlIiwiZ2V0IiwiZXhpc3RpbmdVc2VycyIsImdldE9uZSIsImdldFVzZXIiXSwic291cmNlcyI6WyIuLi8uLi8uLi90eXBlZC9jb250YWluZXJzL3VzZXJzL1VzZXJSZXBvc2l0b3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xudmFyIFN0cmlwZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJhc2UvcGF5bWVudHMvU3RyaXBlXCIpKTtcbnZhciByZXBvc2l0b3JpZXNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJiYXNlL3JlcG9zaXRvcmllc1wiKSk7XG52YXIgY29uZmlnXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY29uZmlnXCIpKTtcbnZhciBqd3RfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJoZWxwZXJzL2p3dFwiKSk7XG52YXIgcGFzc3dvcmRfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJoZWxwZXJzL3Bhc3N3b3JkXCIpKTtcbnZhciBDb25mbGljdEVycm9yXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiaW50ZXJmYWNlcy9yZXN0L2Vycm9ycy9Db25mbGljdEVycm9yXCIpKTtcbnZhciBSZXNvdXJjZU5vdEZvdW5kRXJyb3JfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJpbnRlcmZhY2VzL3Jlc3QvZXJyb3JzL1Jlc291cmNlTm90Rm91bmRFcnJvclwiKSk7XG52YXIgbG9kYXNoXzEgPSByZXF1aXJlKFwibG9kYXNoXCIpO1xudmFyIFVzZXJSZXBvc2l0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFVzZXJSZXBvc2l0b3J5LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFVzZXJSZXBvc2l0b3J5KF9hKSB7XG4gICAgICAgIHZhciBVc2VyID0gX2EubW9kZWxzLlVzZXIsIGN1cnJlbnRVc2VyID0gX2EuY3VycmVudFVzZXI7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHsgTW9kZWw6IFVzZXIgfSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuVXNlciA9IFVzZXI7XG4gICAgICAgIF90aGlzLmN1cnJlbnRVc2VyID0gY3VycmVudFVzZXI7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVXNlclJlcG9zaXRvcnkucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVtYWlsLCBkaXNjb3JkLCB0d2l0dGVyLCBleGlzdGluZ1VzZXJOYW1lLCBuZXdVc2VyXzEsIHN0cmlwZSwgc3RyaXBlX2N1c3RvbWVyLCBuZXdVc2VyLCByZWZlcnJlZCwgcmVmZXJyZXIsIHJlZmVycmVkQ291cG9uO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCA9IHBheWxvYWQuZW1haWwsIGRpc2NvcmQgPSBwYXlsb2FkLmRpc2NvcmQsIHR3aXR0ZXIgPSBwYXlsb2FkLnR3aXR0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZpbmQoeyB1c2VybmFtZTogcGF5bG9hZC51c2VybmFtZSB9LCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1VzZXJOYW1lID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVXNlck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLnVzZXJuYW1lICs9ICgwLCBsb2Rhc2hfMS5yYW5kb20pKDk5OSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJ0ZXN0XCIpKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY3JlYXRlRG9jKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHBheWxvYWQudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzY29yZDogZGlzY29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdpdHRlcjogdHdpdHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291cG9uczogcGF5bG9hZC5jb3Vwb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VXNlcl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ld1VzZXJfMS5nZXRQdWJsaWNGaWVsZHMoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwZSA9IG5ldyBTdHJpcGVfMS5kZWZhdWx0KHsgY29uZmlnOiBjb25maWdfMS5kZWZhdWx0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RyaXBlLmNyZWF0ZUFjY291bnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogcGF5bG9hZC5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcGF5bG9hZC5maXJzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBlX2N1c3RvbWVyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jcmVhdGVEb2Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcGVfY3VzdG9tZXI6IHN0cmlwZV9jdXN0b21lcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHBheWxvYWQudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzY29yZDogZGlzY29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdpdHRlcjogdHdpdHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291cG9uczogcGF5bG9hZC5jb3Vwb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VXNlciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuUmVmZXIuZmluZE9uZSh7IGVtYWlsOiBlbWFpbCB9LCB1bmRlZmluZWQsIHsgbGVhbjogdHJ1ZSB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVycmVkID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWZlcnJlZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZpbmRCeUlkKHJlZmVycmVkLnJlZmVycmVkX2J5KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVycmVyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZmVycmVyKSByZXR1cm4gWzMgLypicmVhayovLCAxMF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZpbmRPbmVBbmRVcGRhdGUoeyBlbWFpbDogcmVmZXJyZXIuZW1haWwsIF9pZDogcmVmZXJyZXIuX2lkIH0sIHsgJHB1c2g6IHsgcmVmZXJyYWxzOiBuZXdVc2VyLl9pZCB9IH0sIHsgbmV3OiB0cnVlIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVycmVkQ291cG9uID0geyBjb2RlOiBcIkZSRUVfUkVGRVJcIiwgcGVyY2VudDogMTAwLCBjYW1wYWlnbjogXCJSRUZFUlJBTFwiLCB1c2VkOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5maW5kT25lQW5kVXBkYXRlKHsgX2lkOiBuZXdVc2VyLl9pZCB9LCB7ICRwdXNoOiB7IGNvdXBvbnM6IHJlZmVycmVkQ291cG9uIH0gfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ld1VzZXIuZ2V0UHVibGljRmllbGRzKCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFVzZXJSZXBvc2l0b3J5LnByb3RvdHlwZS5sb2dpbiA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVzZXIsIHZhbGlkLCB0b2tlbjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZpbmQoeyB1c2VybmFtZTogcGF5bG9hZC51c2VybmFtZSB9LCB1bmRlZmluZWQsIHsgbGVhbjogZmFsc2UgfSwgZmFsc2UpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXNvdXJjZU5vdEZvdW5kRXJyb3JfMS5kZWZhdWx0KFwiTm8gdXNlciB3aXRoIHVzZXJuYW1lIGZvdW5kXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBwYXNzd29yZF8xLmRlZmF1bHQuY29tcGFyZShwYXlsb2FkLnBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IENvbmZsaWN0RXJyb3JfMS5kZWZhdWx0KFwiSW52YWxpZCBQYXNzd29yZCBhbmQgdXNlciBkZXRhaWwgY29tYmluYXRpb25cIildO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBqd3RfMS5kZWZhdWx0LmdlbmVyYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXIuX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHVzZXIudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IHRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLmdldFB1YmxpY0ZpZWxkcygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFVzZXJSZXBvc2l0b3J5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZ1VzZXIsIG5ld1VzZXI7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5maW5kQnlJZChwYXlsb2FkLl9pZCwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdVc2VyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZ1VzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVzb3VyY2VOb3RGb3VuZEVycm9yXzEuZGVmYXVsdChcIlVzZXIgbm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5maW5kT25lQW5kVXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lkOiBwYXlsb2FkLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0c2xpYl8xLl9fYXNzaWduKHt9LCBwYXlsb2FkKSwgeyBuZXc6IHRydWUgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdVc2VyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ld1VzZXIuZ2V0UHVibGljRmllbGRzKCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFVzZXJSZXBvc2l0b3J5LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZ1VzZXIsIHJlbW92ZVVzZXI7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5maW5kQnlJZChwYXlsb2FkLl9pZCwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdVc2VyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZ1VzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVzb3VyY2VOb3RGb3VuZEVycm9yXzEuZGVmYXVsdChcIlVzZXIgbm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5maW5kT25lQW5kRGVsZXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lkOiBwYXlsb2FkLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVVzZXIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVtb3ZlVXNlci5nZXRQdWJsaWNGaWVsZHMoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVXNlclJlcG9zaXRvcnkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdVc2VycztcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZpbmQoe30sIHVuZGVmaW5lZCwgeyBsZWFuOiB0cnVlIH0sIHRydWUpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdVc2VycyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBleGlzdGluZ1VzZXJzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBVc2VyUmVwb3NpdG9yeS5wcm90b3R5cGUuZ2V0T25lID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdVc2VyLCBnZXRVc2VyO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZmluZEJ5SWQocGF5bG9hZC5faWQsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlYW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nVXNlciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmdVc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlc291cmNlTm90Rm91bmRFcnJvcl8xLmRlZmF1bHQoXCJVc2VyIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZmluZCh7IF9pZDogcGF5bG9hZC5faWQgfSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlYW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRVc2VyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGdldFVzZXJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBVc2VyUmVwb3NpdG9yeTtcbn0ocmVwb3NpdG9yaWVzXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVXNlclJlcG9zaXRvcnk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3RCxJQUFJQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUI7QUFDQSxJQUFJQyxRQUFRLEdBQUdGLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLDhCQUF3QixDQUFDO0FBQ3ZFLElBQUlHLGNBQWMsR0FBR0osT0FBTyxDQUFDRyxlQUFlLENBQUNGLE9BQU8sMkJBQXFCLENBQUM7QUFDMUUsSUFBSUksUUFBUSxHQUFHTCxPQUFPLENBQUNHLGVBQWUsQ0FBQ0YsT0FBTyxnQkFBVSxDQUFDO0FBQ3pELElBQUlLLEtBQUssR0FBR04sT0FBTyxDQUFDRyxlQUFlLENBQUNGLE9BQU8scUJBQWUsQ0FBQztBQUMzRCxJQUFJTSxVQUFVLEdBQUdQLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLDBCQUFvQixDQUFDO0FBQ3JFLElBQUlPLGVBQWUsR0FBR1IsT0FBTyxDQUFDRyxlQUFlLENBQUNGLE9BQU8sOENBQXdDLENBQUM7QUFDOUYsSUFBSVEsdUJBQXVCLEdB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
