"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var controllers_1 = tslib_1.__importDefault(require("../../interfaces/rest/controllers"));
var lodash_1 = require("lodash");
var UserController = /** @class */ (function (_super) {
  tslib_1.__extends(UserController, _super);
  function UserController(_a) {
    var createUser = _a.createUser,
      updateUser = _a.updateUser,
      deleteUser = _a.deleteUser,
      getUser = _a.getUser,
      getUsers = _a.getUsers,
      authUser = _a.authUser;
    var _this = _super.call(this) || this;
    _this.create = createUser;
    _this.auth = authUser;
    _this.update = updateUser;
    _this.delete = deleteUser;
    _this.getOne = getUser;
    _this.get = getUsers;
    _this.allowedPayloads = ["username", "email", "discord", "twitter", "type"];
    return _this;
  }
  UserController.prototype.createUser = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            payload = (0, lodash_1.pick)(req.body, this.allowedPayloads);
            return [4 /*yield*/, this.create.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "User added successfully"),
            ];
        }
      });
    });
  };
  UserController.prototype.login = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            payload = (0, lodash_1.pick)(req.body, ["username", "password"]);
            return [4 /*yield*/, this.auth.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "Auth successful!"),
            ];
        }
      });
    });
  };
  UserController.prototype.updateUser = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _id, body, payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _id = (0, lodash_1.pick)(req.params, ["id"]).id;
            body = (0, lodash_1.pick)(req.body, ["username", "discord", "twitter", "type", "verified"]);
            payload = tslib_1.__assign(tslib_1.__assign({}, body), {
              _id: _id,
            });
            return [4 /*yield*/, this.update.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "User updated successfully"),
            ];
        }
      });
    });
  };
  UserController.prototype.deleteUser = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _id, payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _id = (0, lodash_1.pick)(req.params, ["id"]).id;
            payload = {
              _id: _id,
            };
            return [4 /*yield*/, this.delete.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "User deleted successfully!"),
            ];
        }
      });
    });
  };
  UserController.prototype.getUsers = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4 /*yield*/, this.get.execute()];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "User(s) fetched successfully!"),
            ];
        }
      });
    });
  };
  UserController.prototype.getUser = function (req, res) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _id, payload, response;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _id = (0, lodash_1.pick)(req.params, ["id"]).id;
            payload = {
              _id: _id,
            };
            return [4 /*yield*/, this.getOne.execute(payload)];
          case 1:
            response = _a.sent();
            return [
              2 /*return*/,
              this.responseBuilder.getResponseHandler(res).onSuccess(response, "User fetched successfully!"),
            ];
        }
      });
    });
  };
  return UserController;
})(controllers_1.default);
exports.default = UserController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
