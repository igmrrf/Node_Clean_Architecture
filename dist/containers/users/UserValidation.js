"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var express_validator_1 = require("express-validator");
var UserValidation = {
  create: [
    (0, express_validator_1.body)("username").notEmpty().withMessage("Username required"),
    (0, express_validator_1.body)("email").notEmpty().withMessage("Email required"),
    (0, express_validator_1.body)("discord").notEmpty().withMessage("Discord username required"),
    (0, express_validator_1.body)("twitter").notEmpty().withMessage("Twitter username required"),
  ],
  login: [(0, express_validator_1.body)("username").notEmpty().withMessage("Wallet address required")],
  update: [
    (0, express_validator_1.body)("username").notEmpty().withMessage("Username required"),
    (0, express_validator_1.body)("discord").notEmpty().withMessage("Discord username required"),
    (0, express_validator_1.body)("twitter").notEmpty().withMessage("Twitter username required"),
    (0, express_validator_1.body)("verified"),
  ],
  getAll: [],
  getOne: [
    (0, express_validator_1.param)("id")
      .notEmpty()
      .withMessage("An id is required")
      .isMongoId()
      .withMessage("A valid MongoDB ID is required"),
  ],
  remove: [
    (0, express_validator_1.param)("id")
      .notEmpty()
      .withMessage("An id is required")
      .isMongoId()
      .withMessage("A valid MongoDB ID is required"),
  ],
};
exports.default = UserValidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV4cHJlc3NfdmFsaWRhdG9yXzEiLCJyZXF1aXJlIiwiVXNlclZhbGlkYXRpb24iLCJjcmVhdGUiLCJib2R5Iiwibm90RW1wdHkiLCJ3aXRoTWVzc2FnZSIsImxvZ2luIiwidXBkYXRlIiwiZ2V0QWxsIiwiZ2V0T25lIiwicGFyYW0iLCJpc01vbmdvSWQiLCJyZW1vdmUiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vdHlwZWQvY29udGFpbmVycy91c2Vycy9Vc2VyVmFsaWRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBleHByZXNzX3ZhbGlkYXRvcl8xID0gcmVxdWlyZShcImV4cHJlc3MtdmFsaWRhdG9yXCIpO1xudmFyIFVzZXJWYWxpZGF0aW9uID0ge1xuICAgIGNyZWF0ZTogW1xuICAgICAgICAoMCwgZXhwcmVzc192YWxpZGF0b3JfMS5ib2R5KShcInVzZXJuYW1lXCIpLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoXCJVc2VybmFtZSByZXF1aXJlZFwiKSxcbiAgICAgICAgKDAsIGV4cHJlc3NfdmFsaWRhdG9yXzEuYm9keSkoXCJlbWFpbFwiKS5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKFwiRW1haWwgcmVxdWlyZWRcIiksXG4gICAgICAgICgwLCBleHByZXNzX3ZhbGlkYXRvcl8xLmJvZHkpKFwiZGlzY29yZFwiKS5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKFwiRGlzY29yZCB1c2VybmFtZSByZXF1aXJlZFwiKSxcbiAgICAgICAgKDAsIGV4cHJlc3NfdmFsaWRhdG9yXzEuYm9keSkoXCJ0d2l0dGVyXCIpLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoXCJUd2l0dGVyIHVzZXJuYW1lIHJlcXVpcmVkXCIpLFxuICAgIF0sXG4gICAgbG9naW46IFsoMCwgZXhwcmVzc192YWxpZGF0b3JfMS5ib2R5KShcInVzZXJuYW1lXCIpLm5vdEVtcHR5KCkud2l0aE1lc3NhZ2UoXCJXYWxsZXQgYWRkcmVzcyByZXF1aXJlZFwiKV0sXG4gICAgdXBkYXRlOiBbXG4gICAgICAgICgwLCBleHByZXNzX3ZhbGlkYXRvcl8xLmJvZHkpKFwidXNlcm5hbWVcIikubm90RW1wdHkoKS53aXRoTWVzc2FnZShcIlVzZXJuYW1lIHJlcXVpcmVkXCIpLFxuICAgICAgICAoMCwgZXhwcmVzc192YWxpZGF0b3JfMS5ib2R5KShcImRpc2NvcmRcIikubm90RW1wdHkoKS53aXRoTWVzc2FnZShcIkRpc2NvcmQgdXNlcm5hbWUgcmVxdWlyZWRcIiksXG4gICAgICAgICgwLCBleHByZXNzX3ZhbGlkYXRvcl8xLmJvZHkpKFwidHdpdHRlclwiKS5ub3RFbXB0eSgpLndpdGhNZXNzYWdlKFwiVHdpdHRlciB1c2VybmFtZSByZXF1aXJlZFwiKSxcbiAgICAgICAgKDAsIGV4cHJlc3NfdmFsaWRhdG9yXzEuYm9keSkoXCJ2ZXJpZmllZFwiKSxcbiAgICBdLFxuICAgIGdldEFsbDogW10sXG4gICAgZ2V0T25lOiBbXG4gICAgICAgICgwLCBleHByZXNzX3ZhbGlkYXRvcl8xLnBhcmFtKShcImlkXCIpXG4gICAgICAgICAgICAubm90RW1wdHkoKVxuICAgICAgICAgICAgLndpdGhNZXNzYWdlKFwiQW4gaWQgaXMgcmVxdWlyZWRcIilcbiAgICAgICAgICAgIC5pc01vbmdvSWQoKVxuICAgICAgICAgICAgLndpdGhNZXNzYWdlKFwiQSB2YWxpZCBNb25nb0RCIElEIGlzIHJlcXVpcmVkXCIpLFxuICAgIF0sXG4gICAgcmVtb3ZlOiBbXG4gICAgICAgICgwLCBleHByZXNzX3ZhbGlkYXRvcl8xLnBhcmFtKShcImlkXCIpXG4gICAgICAgICAgICAubm90RW1wdHkoKVxuICAgICAgICAgICAgLndpdGhNZXNzYWdlKFwiQW4gaWQgaXMgcmVxdWlyZWRcIilcbiAgICAgICAgICAgIC5pc01vbmdvSWQoKVxuICAgICAgICAgICAgLndpdGhNZXNzYWdlKFwiQSB2YWxpZCBNb25nb0RCIElEIGlzIHJlcXVpcmVkXCIpLFxuICAgIF0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gVXNlclZhbGlkYXRpb247XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3RCxJQUFJQyxtQkFBbUIsR0FBR0MsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQ3RELElBQUlDLGNBQWMsR0FBRztFQUNqQkMsTUFBTSxFQUFFLENBQ0osQ0FBQyxDQUFDLEVBQUVILG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsRUFDckYsQ0FBQyxDQUFDLEVBQUVOLG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsRUFDL0UsQ0FBQyxDQUFDLEVBQUVOLG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxXQUFXLENBQUMsMkJBQTJCLENBQUMsRUFDNUYsQ0FBQyxDQUFDLEVBQUVOLG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxXQUFXLENBQUMsMkJBQTJCLENBQUMsQ0FDL0Y7RUFDREMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUVQLG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxXQUFXLENBQUMseUJBQXlCLENBQUMsQ0FBQztFQUNwR0UsTUFBTSxFQUFFLENBQ0osQ0FBQyxDQUFDLEVBQUVSLG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsRUFDckYsQ0FBQyxDQUFDLEVBQUVOLG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxXQUFXLENBQUMsMkJBQTJCLENBQUMsRUFDNUYsQ0FBQyxDQUFDLEVBQUVOLG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxXQUFXLENBQUMsMkJBQTJCLENBQUMsRUFDNUYsQ0FBQyxDQUFDLEVBQUVOLG1CQUFtQixDQUFDSSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQzVDO0VBQ0RLLE1BQU0sRUFBRSxFQUFFO0VBQ1ZDLE1BQU0sRUFBRSxDQUNKLENBQUMsQ0FBQyxFQUFFVixtQkFBbUIsQ0FBQ1csS0FBSyxFQUFFLElBQUksQ0FBQyxDQUMvQk4sUUFBUSxFQUFFLENBQ1ZDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUNoQ00sU0FBUyxFQUFFLENBQ1hOLFdBQVcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUNyRDtFQUNETyxNQUFNLEVBQUUsQ0FDSixDQUFDLENBQUMsRUFBRWIsbUJBQW1CLENBQUNXLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FDL0JOLFFBQVEsRUFBRSxDQUNWQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FDaENNLFNBQVMsRUFBRSxDQUNYTixXQUFXLENBQUMsZ0NBQWdDLENBQUM7QUFFMUQsQ0FBQztBQUNEUixPQUFPLENBQUNnQixPQUFPLEdBQUdaLGNBQWMifQ==
