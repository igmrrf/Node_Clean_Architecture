"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var mongoose_1 = tslib_1.__importDefault(require("mongoose"));
var UserEntity_1 = tslib_1.__importDefault(require("./UserEntity"));
var userSchema = new mongoose_1.default.Schema(
  {
    username: {
      type: String,
      required: true,
      lowercase: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      lowercase: true,
    },
    discord: {
      type: String,
      required: true,
    },
    twitter: {
      type: String,
      required: true,
    },
    type: {
      type: String,
      enum: ["customer", "partner", "staff", "admin"],
      default: "customer",
      required: true,
    },
    verified: {
      type: Boolean,
      default: false,
    },
    referrals: [
      {
        type: mongoose_1.default.Types.ObjectId,
        ref: "User",
      },
    ],
    coupons: [
      {
        code: {
          type: String,
          default: false,
        },
        percent: {
          type: Number,
          default: 0,
          min: 1,
          max: 10,
        },
        campaign: {
          type: String,
          default: "",
        },
        used: {
          type: Boolean,
          default: false,
        },
      },
    ],
    stripe_customer: Object,
    updated_by: {
      type: mongoose_1.default.Types.ObjectId,
      ref: "User",
    },
    created_by: {
      type: mongoose_1.default.Types.ObjectId,
      ref: "User",
      required: false,
    },
  },
  {
    timestamps: {
      createdAt: "created_at",
      updatedAt: "updated_at",
    },
    toObject: {
      virtuals: true,
      retainKeyOrder: true,
    },
    toJSON: {
      virtuals: true,
    },
  },
);
userSchema.loadClass(UserEntity_1.default);
exports.default = mongoose_1.default.model("User", userSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwibW9uZ29vc2VfMSIsIl9faW1wb3J0RGVmYXVsdCIsIlVzZXJFbnRpdHlfMSIsInVzZXJTY2hlbWEiLCJkZWZhdWx0IiwiU2NoZW1hIiwidXNlcm5hbWUiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJsb3dlcmNhc2UiLCJ1bmlxdWUiLCJlbWFpbCIsImRpc2NvcmQiLCJ0d2l0dGVyIiwiZW51bSIsInZlcmlmaWVkIiwiQm9vbGVhbiIsInJlZmVycmFscyIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJjb3Vwb25zIiwiY29kZSIsInBlcmNlbnQiLCJOdW1iZXIiLCJtaW4iLCJtYXgiLCJjYW1wYWlnbiIsInVzZWQiLCJzdHJpcGVfY3VzdG9tZXIiLCJ1cGRhdGVkX2J5IiwiY3JlYXRlZF9ieSIsInRpbWVzdGFtcHMiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJ0b09iamVjdCIsInZpcnR1YWxzIiwicmV0YWluS2V5T3JkZXIiLCJ0b0pTT04iLCJsb2FkQ2xhc3MiLCJtb2RlbCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3R5cGVkL2NvbnRhaW5lcnMvdXNlcnMvVXNlck1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgbW9uZ29vc2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtb25nb29zZVwiKSk7XG52YXIgVXNlckVudGl0eV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVXNlckVudGl0eVwiKSk7XG52YXIgdXNlclNjaGVtYSA9IG5ldyBtb25nb29zZV8xLmRlZmF1bHQuU2NoZW1hKHtcbiAgICB1c2VybmFtZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBsb3dlcmNhc2U6IHRydWUsXG4gICAgICAgIHVuaXF1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIGVtYWlsOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIGxvd2VyY2FzZTogdHJ1ZSxcbiAgICB9LFxuICAgIGRpc2NvcmQ6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHR3aXR0ZXI6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHR5cGU6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBlbnVtOiBbXCJjdXN0b21lclwiLCBcInBhcnRuZXJcIiwgXCJzdGFmZlwiLCBcImFkbWluXCJdLFxuICAgICAgICBkZWZhdWx0OiBcImN1c3RvbWVyXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgdmVyaWZpZWQ6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgICByZWZlcnJhbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogbW9uZ29vc2VfMS5kZWZhdWx0LlR5cGVzLk9iamVjdElkLFxuICAgICAgICAgICAgcmVmOiBcIlVzZXJcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGNvdXBvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgY29kZToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZXJjZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDAsXG4gICAgICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgICAgIG1heDogMTAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FtcGFpZ246IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogXCJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1c2VkOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdHJpcGVfY3VzdG9tZXI6IE9iamVjdCxcbiAgICB1cGRhdGVkX2J5OiB7XG4gICAgICAgIHR5cGU6IG1vbmdvb3NlXzEuZGVmYXVsdC5UeXBlcy5PYmplY3RJZCxcbiAgICAgICAgcmVmOiBcIlVzZXJcIixcbiAgICB9LFxuICAgIGNyZWF0ZWRfYnk6IHtcbiAgICAgICAgdHlwZTogbW9uZ29vc2VfMS5kZWZhdWx0LlR5cGVzLk9iamVjdElkLFxuICAgICAgICByZWY6IFwiVXNlclwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgfSxcbn0sIHtcbiAgICB0aW1lc3RhbXBzOiB7XG4gICAgICAgIGNyZWF0ZWRBdDogXCJjcmVhdGVkX2F0XCIsXG4gICAgICAgIHVwZGF0ZWRBdDogXCJ1cGRhdGVkX2F0XCIsXG4gICAgfSxcbiAgICB0b09iamVjdDoge1xuICAgICAgICB2aXJ0dWFsczogdHJ1ZSxcbiAgICAgICAgcmV0YWluS2V5T3JkZXI6IHRydWUsXG4gICAgfSxcbiAgICB0b0pTT046IHtcbiAgICAgICAgdmlydHVhbHM6IHRydWUsXG4gICAgfSxcbn0pO1xudXNlclNjaGVtYS5sb2FkQ2xhc3MoVXNlckVudGl0eV8xLmRlZmF1bHQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gbW9uZ29vc2VfMS5kZWZhdWx0Lm1vZGVsKFwiVXNlclwiLCB1c2VyU2NoZW1hKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixJQUFJQyxVQUFVLEdBQUdGLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0QsSUFBSUcsWUFBWSxHQUFHSixPQUFPLENBQUNHLGVBQWUsQ0FBQ0YsT0FBTyxnQkFBZ0IsQ0FBQztBQUNuRSxJQUFJSSxVQUFVLEdBQUcsSUFBSUgsVUFBVSxDQUFDSSxPQUFPLENBQUNDLE1BQU0sQ0FBQztFQUMzQ0MsUUFBUSxFQUFFO0lBQ05DLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxTQUFTLEVBQUUsSUFBSTtJQUNmQyxNQUFNLEVBQUU7RUFDWixDQUFDO0VBQ0RDLEtBQUssRUFBRTtJQUNITCxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLElBQUk7SUFDZEMsU0FBUyxFQUFFO0VBQ2YsQ0FBQztFQUNERyxPQUFPLEVBQUU7SUFDTE4sSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRTtFQUNkLENBQUM7RUFDREssT0FBTyxFQUFFO0lBQ0xQLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUU7RUFDZCxDQUFDO0VBQ0RGLElBQUksRUFBRTtJQUNGQSxJQUFJLEVBQUVDLE1BQU07SUFDWk8sSUFBSSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO0lBQy9DWCxPQUFPLEVBQUUsVUFBVTtJQUNuQkssUUFBUSxFQUFFO0VBQ2QsQ0FBQztFQUNETyxRQUFRLEVBQUU7SUFDTlQsSUFBSSxFQUFFVSxPQUFPO0lBQ2JiLE9BQU8sRUFBRTtFQUNiLENBQUM7RUFDRGMsU0FBUyxFQUFFLENBQ1A7SUFDSVgsSUFBSSxFQUFFUCxVQUFVLENBQUNJLE9BQU8sQ0FBQ2UsS0FBSyxDQUFDQyxRQUFRO0lBQ3ZDQyxHQUFHLEVBQUU7RUFDVCxDQUFDLENBQ0o7RUFDREMsT0FBTyxFQUFFLENBQ0w7SUFDSUMsSUFBSSxFQUFFO01BQ0ZoQixJQUFJLEVBQUVDLE1BQU07TUFDWkosT0FBTyxFQUFFO0lBQ2IsQ0FBQztJQUNEb0IsT0FBTyxFQUFFO01BQ0xqQixJQUFJLEVBQUVrQixNQUFNO01BQ1pyQixPQUFPLEVBQUUsQ0FBQztNQUNWc0IsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxRQUFRLEVBQUU7TUFDTnJCLElBQUksRUFBRUMsTUFBTTtNQUNaSixPQUFPLEVBQUU7SUFDYixDQUFDO0lBQ0R5QixJQUFJLEVBQUU7TUFDRnRCLElBQUksRUFBRVUsT0FBTztNQUNiYixPQUFPLEVBQUU7SUFDYjtFQUNKLENBQUMsQ0FDSjtFQUNEMEIsZUFBZSxFQUFFcEMsTUFBTTtFQUN2QnFDLFVBQVUsRUFBRTtJQUNSeEIsSUFBSSxFQUFFUCxVQUFVLENBQUNJLE9BQU8sQ0FBQ2UsS0FBSyxDQUFDQyxRQUFRO0lBQ3ZDQyxHQUFHLEVBQUU7RUFDVCxDQUFDO0VBQ0RXLFVBQVUsRUFBRTtJQUNSekIsSUFBSSxFQUFFUCxVQUFVLENBQUNJLE9BQU8sQ0FBQ2UsS0FBSyxDQUFDQyxRQUFRO0lBQ3ZDQyxHQUFHLEVBQUUsTUFBTTtJQUNYWixRQUFRLEVBQUU7RUFDZDtBQUNKLENBQUMsRUFBRTtFQUNDd0IsVUFBVSxFQUFFO0lBQ1JDLFNBQVMsRUFBRSxZQUFZO0lBQ3ZCQyxTQUFTLEVBQUU7RUFDZixDQUFDO0VBQ0RDLFFBQVEsRUFBRTtJQUNOQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxjQUFjLEVBQUU7RUFDcEIsQ0FBQztFQUNEQyxNQUFNLEVBQUU7SUFDSkYsUUFBUSxFQUFFO0VBQ2Q7QUFDSixDQUFDLENBQUM7QUFDRmxDLFVBQVUsQ0FBQ3FDLFNBQVMsQ0FBQ3RDLFlBQVksQ0FBQ0UsT0FBTyxDQUFDO0FBQzFDUixPQUFPLENBQUNRLE9BQU8sR0FBR0osVUFBVSxDQUFDSSxPQUFPLENBQUNxQyxLQUFLLENBQUMsTUFBTSxFQUFFdEMsVUFBVSxDQUFDIn0=
