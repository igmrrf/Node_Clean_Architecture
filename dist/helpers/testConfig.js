"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
// tests/db-handler.js
var mongodb_memory_server_1 = require("mongodb-memory-server");
var mongoose_1 = tslib_1.__importDefault(require("mongoose"));
/**
 * Connect to the in-memory database.
 */
// eslint-disable-next-line consistent-return
var connect = function () {
  return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var replSet, uri, mongooseOpts, error_1;
    return tslib_1.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [
            4 /*yield*/,
            mongodb_memory_server_1.MongoMemoryReplSet.create({
              replSet: {
                count: 3,
              },
            }),
          ];
        case 1:
          replSet = _a.sent();
          uri = replSet.getUri();
          mongooseOpts = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
          };
          _a.label = 2;
        case 2:
          _a.trys.push([2, 4, , 5]);
          return [4 /*yield*/, mongoose_1.default.connect(uri, mongooseOpts)];
        case 3:
          _a.sent();
          return [3 /*break*/, 5];
        case 4:
          error_1 = _a.sent();
          return [2 /*return*/, error_1];
        case 5:
          return [2 /*return*/];
      }
    });
  });
};
/**
 * Drop database, close the connection and stop mongod.
 */
var closeDatabase = function () {
  return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4 /*yield*/, mongoose_1.default.connection.dropDatabase()];
        case 1:
          _a.sent();
          return [4 /*yield*/, mongoose_1.default.connection.close()];
        case 2:
          _a.sent();
          return [2 /*return*/];
      }
    });
  });
};
/**
 * Remove all the data for all db collections.
 */
var clearDatabase = function () {
  return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var collections, keys, i, collection;
    return tslib_1.__generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          collections = mongoose_1.default.connection.collections;
          keys = Object.keys(collections);
          i = 0;
          _a.label = 1;
        case 1:
          if (!(i < keys.length)) return [3 /*break*/, 4];
          collection = collections[keys[i]];
          // eslint-disable-next-line no-await-in-loop
          return [4 /*yield*/, collection.deleteMany()];
        case 2:
          // eslint-disable-next-line no-await-in-loop
          _a.sent();
          _a.label = 3;
        case 3:
          i += 1;
          return [3 /*break*/, 1];
        case 4:
          return [2 /*return*/];
      }
    });
  });
};

exports.default = {
  clearDatabase: clearDatabase,
  closeDatabase: closeDatabase,
  connect: connect,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
