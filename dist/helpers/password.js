"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var bcryptjs_1 = tslib_1.__importDefault(require("bcryptjs"));
var Password = /** @class */ (function () {
  function Password() {}
  /**
   * Hashes a password
   * @param {String} password - Password to hash
   * @param {Number} saltRounds - Number of salt rounds
   */
  Password.hash = function (password, saltRounds) {
    if (saltRounds === void 0) {
      saltRounds = 10;
    }
    return new Promise(function (resolve, reject) {
      bcryptjs_1.default.genSalt(saltRounds, function (err, salt) {
        if (err) {
          reject(err);
        }
        bcryptjs_1.default.hash(password, salt, function (error, hash) {
          if (error) {
            reject(error);
          }
          resolve(hash);
        });
      });
    });
  };
  /**
   * Compares a plain-text password with hashed password for a match
   * @param {String} password - Password in plain text
   * @param {String} hash - Hashed password
   */
  Password.compare = function (password, hash) {
    return new Promise(function (resolve, reject) {
      bcryptjs_1.default.compare(password, hash, function (err, success) {
        if (err) {
          reject(err);
        }
        resolve(success);
      });
    });
  };
  return Password;
})();
exports.default = Password;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiYmNyeXB0anNfMSIsIl9faW1wb3J0RGVmYXVsdCIsIlBhc3N3b3JkIiwiaGFzaCIsInBhc3N3b3JkIiwic2FsdFJvdW5kcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGVmYXVsdCIsImdlblNhbHQiLCJlcnIiLCJzYWx0IiwiZXJyb3IiLCJjb21wYXJlIiwic3VjY2VzcyJdLCJzb3VyY2VzIjpbIi4uLy4uL3R5cGVkL2hlbHBlcnMvcGFzc3dvcmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBiY3J5cHRqc18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJjcnlwdGpzXCIpKTtcbnZhciBQYXNzd29yZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXNzd29yZCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFzaGVzIGEgcGFzc3dvcmRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFzc3dvcmQgLSBQYXNzd29yZCB0byBoYXNoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNhbHRSb3VuZHMgLSBOdW1iZXIgb2Ygc2FsdCByb3VuZHNcbiAgICAgKi9cbiAgICBQYXNzd29yZC5oYXNoID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0Um91bmRzKSB7XG4gICAgICAgIGlmIChzYWx0Um91bmRzID09PSB2b2lkIDApIHsgc2FsdFJvdW5kcyA9IDEwOyB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBiY3J5cHRqc18xLmRlZmF1bHQuZ2VuU2FsdChzYWx0Um91bmRzLCBmdW5jdGlvbiAoZXJyLCBzYWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmNyeXB0anNfMS5kZWZhdWx0Lmhhc2gocGFzc3dvcmQsIHNhbHQsIGZ1bmN0aW9uIChlcnJvciwgaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShoYXNoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIGEgcGxhaW4tdGV4dCBwYXNzd29yZCB3aXRoIGhhc2hlZCBwYXNzd29yZCBmb3IgYSBtYXRjaFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXNzd29yZCAtIFBhc3N3b3JkIGluIHBsYWluIHRleHRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaGFzaCAtIEhhc2hlZCBwYXNzd29yZFxuICAgICAqL1xuICAgIFBhc3N3b3JkLmNvbXBhcmUgPSBmdW5jdGlvbiAocGFzc3dvcmQsIGhhc2gpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGJjcnlwdGpzXzEuZGVmYXVsdC5jb21wYXJlKHBhc3N3b3JkLCBoYXNoLCBmdW5jdGlvbiAoZXJyLCBzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBQYXNzd29yZDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBQYXNzd29yZDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixJQUFJQyxVQUFVLEdBQUdGLE9BQU8sQ0FBQ0csZUFBZSxDQUFDRixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0QsSUFBSUcsUUFBUSxHQUFHLGFBQWUsWUFBWTtFQUN0QyxTQUFTQSxRQUFRLEdBQUcsQ0FDcEI7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lBLFFBQVEsQ0FBQ0MsSUFBSSxHQUFHLFVBQVVDLFFBQVEsRUFBRUMsVUFBVSxFQUFFO0lBQzVDLElBQUlBLFVBQVUsS0FBSyxLQUFLLENBQUMsRUFBRTtNQUFFQSxVQUFVLEdBQUcsRUFBRTtJQUFFO0lBQzlDLE9BQU8sSUFBSUMsT0FBTyxDQUFDLFVBQVVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFO01BQzFDUixVQUFVLENBQUNTLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDTCxVQUFVLEVBQUUsVUFBVU0sR0FBRyxFQUFFQyxJQUFJLEVBQUU7UUFDeEQsSUFBSUQsR0FBRyxFQUFFO1VBQ0xILE1BQU0sQ0FBQ0csR0FBRyxDQUFDO1FBQ2Y7UUFDQVgsVUFBVSxDQUFDUyxPQUFPLENBQUNOLElBQUksQ0FBQ0MsUUFBUSxFQUFFUSxJQUFJLEVBQUUsVUFBVUMsS0FBSyxFQUFFVixJQUFJLEVBQUU7VUFDM0QsSUFBSVUsS0FBSyxFQUFFO1lBQ1BMLE1BQU0sQ0FBQ0ssS0FBSyxDQUFDO1VBQ2pCO1VBQ0FOLE9BQU8sQ0FBQ0osSUFBSSxDQUFDO1FBQ2pCLENBQUMsQ0FBQztNQUNOLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUNOLENBQUM7RUFDRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lELFFBQVEsQ0FBQ1ksT0FBTyxHQUFHLFVBQVVWLFFBQVEsRUFBRUQsSUFBSSxFQUFFO0lBQ3pDLE9BQU8sSUFBSUcsT0FBTyxDQUFDLFVBQVVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFO01BQzFDUixVQUFVLENBQUNTLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDVixRQUFRLEVBQUVELElBQUksRUFBRSxVQUFVUSxHQUFHLEVBQUVJLE9BQU8sRUFBRTtRQUMvRCxJQUFJSixHQUFHLEVBQUU7VUFDTEgsTUFBTSxDQUFDRyxHQUFHLENBQUM7UUFDZjtRQUNBSixPQUFPLENBQUNRLE9BQU8sQ0FBQztNQUNwQixDQUFDLENBQUM7SUFDTixDQUFDLENBQUM7RUFDTixDQUFDO0VBQ0QsT0FBT2IsUUFBUTtBQUNuQixDQUFDLEVBQUc7QUFDSk4sT0FBTyxDQUFDYSxPQUFPLEdBQUdQLFFBQVEifQ==
