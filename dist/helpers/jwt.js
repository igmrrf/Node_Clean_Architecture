"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var jsonwebtoken_1 = tslib_1.__importDefault(require("jsonwebtoken"));
var config_1 = tslib_1.__importDefault(require("../config"));
var Token = /** @class */ (function () {
  function Token() {}
  /**
   * Generates a token for a user
   * @param {String} userId - The ID of the user
   * @returns {String} - The generated token
   */
  Token.generate = function (payload, options) {
    var userId = payload.userId,
      data = tslib_1.__rest(payload, ["userId"]);
    var jwtIssuer = config_1.default.get("app.jwtIssuer");
    var jwtAudience = config_1.default.get("app.jwtAudience");
    var jwtSecret = config_1.default.get("app.jwtSecret");
    var token = jsonwebtoken_1.default.sign(
      tslib_1.__assign(
        {
          iss: jwtIssuer,
          aud: jwtAudience,
          sub: userId,
          iat: Math.floor(Date.now() / 1000),
          exp: Math.floor(Date.now() / 1000) + 60 * 60 * 6,
        },
        data,
      ),
      jwtSecret,
      options,
    );
    return token;
  };
  /**
   * Decodes a JWT and returns it's payload
   * @param {String} token - JWT string to decode
   * @returns {Promise<Object>} A promise that resolves to the JWT payload
   */
  Token.decodeJWT = function (token) {
    var jwtSecret = config_1.default.get("app.jwtSecret");
    return new Promise(function (resolve, reject) {
      jsonwebtoken_1.default.verify(token, jwtSecret, function (err, payload) {
        if (err) {
          reject(err);
        }
        resolve(payload);
      });
    });
  };
  /**
   * Checks if an error is as a result of an invalid JWT
   * @param {Error} error - An error object
   * @returns {Boolean} true if the error is a JWT Error, false otherwise
   */
  Token.isJWTError = function (error) {
    var jwtErrors = ["TokenExpiredError", "JsonWebTokenError", "NotBeforeError"];
    return jwtErrors.includes(error.name);
  };
  return Token;
})();
exports.default = Token;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwianNvbndlYnRva2VuXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJjb25maWdfMSIsIlRva2VuIiwiZ2VuZXJhdGUiLCJwYXlsb2FkIiwib3B0aW9ucyIsInVzZXJJZCIsImRhdGEiLCJfX3Jlc3QiLCJqd3RJc3N1ZXIiLCJkZWZhdWx0IiwiZ2V0Iiwiand0QXVkaWVuY2UiLCJqd3RTZWNyZXQiLCJ0b2tlbiIsInNpZ24iLCJfX2Fzc2lnbiIsImlzcyIsImF1ZCIsInN1YiIsImlhdCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJleHAiLCJkZWNvZGVKV1QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInZlcmlmeSIsImVyciIsImlzSldURXJyb3IiLCJlcnJvciIsImp3dEVycm9ycyIsImluY2x1ZGVzIiwibmFtZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3R5cGVkL2hlbHBlcnMvand0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIganNvbndlYnRva2VuXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianNvbndlYnRva2VuXCIpKTtcbnZhciBjb25maWdfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjb25maWdcIikpO1xudmFyIFRva2VuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRva2VuKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB0b2tlbiBmb3IgYSB1c2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJJZCAtIFRoZSBJRCBvZiB0aGUgdXNlclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gVGhlIGdlbmVyYXRlZCB0b2tlblxuICAgICAqL1xuICAgIFRva2VuLmdlbmVyYXRlID0gZnVuY3Rpb24gKHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHVzZXJJZCA9IHBheWxvYWQudXNlcklkLCBkYXRhID0gdHNsaWJfMS5fX3Jlc3QocGF5bG9hZCwgW1widXNlcklkXCJdKTtcbiAgICAgICAgdmFyIGp3dElzc3VlciA9IGNvbmZpZ18xLmRlZmF1bHQuZ2V0KFwiYXBwLmp3dElzc3VlclwiKTtcbiAgICAgICAgdmFyIGp3dEF1ZGllbmNlID0gY29uZmlnXzEuZGVmYXVsdC5nZXQoXCJhcHAuand0QXVkaWVuY2VcIik7XG4gICAgICAgIHZhciBqd3RTZWNyZXQgPSBjb25maWdfMS5kZWZhdWx0LmdldChcImFwcC5qd3RTZWNyZXRcIik7XG4gICAgICAgIHZhciB0b2tlbiA9IGpzb253ZWJ0b2tlbl8xLmRlZmF1bHQuc2lnbih0c2xpYl8xLl9fYXNzaWduKHsgaXNzOiBqd3RJc3N1ZXIsIGF1ZDogand0QXVkaWVuY2UsIHN1YjogdXNlcklkLCBpYXQ6IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApLCBleHA6IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgNjAgKiA2MCAqIDYgfSwgZGF0YSksIGp3dFNlY3JldCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBKV1QgYW5kIHJldHVybnMgaXQncyBwYXlsb2FkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIC0gSldUIHN0cmluZyB0byBkZWNvZGVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgSldUIHBheWxvYWRcbiAgICAgKi9cbiAgICBUb2tlbi5kZWNvZGVKV1QgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgdmFyIGp3dFNlY3JldCA9IGNvbmZpZ18xLmRlZmF1bHQuZ2V0KFwiYXBwLmp3dFNlY3JldFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGpzb253ZWJ0b2tlbl8xLmRlZmF1bHQudmVyaWZ5KHRva2VuLCBqd3RTZWNyZXQsIGZ1bmN0aW9uIChlcnIsIHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHBheWxvYWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGFuIGVycm9yIGlzIGFzIGEgcmVzdWx0IG9mIGFuIGludmFsaWQgSldUXG4gICAgICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgLSBBbiBlcnJvciBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgZXJyb3IgaXMgYSBKV1QgRXJyb3IsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIFRva2VuLmlzSldURXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdmFyIGp3dEVycm9ycyA9IFtcbiAgICAgICAgICAgIFwiVG9rZW5FeHBpcmVkRXJyb3JcIixcbiAgICAgICAgICAgIFwiSnNvbldlYlRva2VuRXJyb3JcIixcbiAgICAgICAgICAgIFwiTm90QmVmb3JlRXJyb3JcIixcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIGp3dEVycm9ycy5pbmNsdWRlcyhlcnJvci5uYW1lKTtcbiAgICB9O1xuICAgIHJldHVybiBUb2tlbjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBUb2tlbjtcbiJdLCJtYXBwaW5ncyI6IkFB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
