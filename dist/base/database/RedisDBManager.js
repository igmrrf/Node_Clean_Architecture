"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var redis_1 = tslib_1.__importDefault(require("redis"));
var RedisDBManager = /** @class */ (function () {
  function RedisDBManager(_a) {
    var config = _a.config,
      logger = _a.logger;
    var _this = this;
    this.config = config;
    this.logger = logger;
    var redisUrl = config.get("app.redisUrl");
    this.client = redis_1.default.createClient({
      url: redisUrl,
    });
    this.client.on("error", function () {
      return _this.logger.error("Error while connecting to Redis");
    });
  }
  RedisDBManager.prototype.connect = function (numOfRetries) {
    if (numOfRetries === void 0) {
      numOfRetries = 3;
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var error_1;
      var _this = this;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4 /*yield*/, this.client.connect()];
          case 1:
            _a.sent();
            return [3 /*break*/, 3];
          case 2:
            error_1 = _a.sent();
            this.logger.error("Failed to connect to Redis", error_1);
            if (numOfRetries <= 0) {
              this.logger.error("Exhausted max number of retires for connecting Redis");
              process.exit(1);
            }
            setTimeout(function () {
              _this.connect(numOfRetries - 1);
            }, 1000);
            return [3 /*break*/, 3];
          case 3:
            return [2 /*return*/];
        }
      });
    });
  };

  RedisDBManager.prototype.disconnect = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var error_2;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.logger.info("Disconnecting database connection...");
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [4 /*yield*/, this.client.quit()];
          case 2:
            _a.sent();
            return [3 /*break*/, 4];
          case 3:
            error_2 = _a.sent();
            this.logger.error("Error while disconnecting Redis Database", {
              error: error_2,
            });
            process.exit(1);
            return [3 /*break*/, 4];
          case 4:
            return [2 /*return*/];
        }
      });
    });
  };

  return RedisDBManager;
})();
exports.default = RedisDBManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
