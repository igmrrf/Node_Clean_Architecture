"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var mongoose_1 = tslib_1.__importDefault(require("mongoose"));
/**
 * Manages connection to MongoDB
 */
var MongoDBManager = /** @class */ (function () {
  function MongoDBManager(_a) {
    var config = _a.config,
      logger = _a.logger;
    var _this = this;
    this.config = config;
    this.logger = logger;
    var user = encodeURIComponent(config.get("db.user"));
    var password = encodeURIComponent(config.get("db.password"));
    var host = config.get("db.host");
    var name = config.get("db.name");
    var auth = config.get("db.auth");
    var connectionString = "mongodb://".concat(host, "/").concat(name);
    if (auth) {
      connectionString = "mongodb+srv://"
        .concat(user, ":")
        .concat(password, "@")
        .concat(host, "/")
        .concat(name, "?retryWrites=true&w=majority");
    }
    this.connectionString = connectionString;
    this.connection = mongoose_1.default.connection;
    mongoose_1.default.set("strictQuery", true);
    if (this.config.get("app.env") === "development") {
      mongoose_1.default.set("debug", true);
    }
    this.connection.on("open", function () {
      return _this.logger.info("Successfully connected to MongoDB");
    });
    this.connection.on("disconnected", function () {
      return _this.logger.info("Disconnected from MongoDB");
    });
    this.connection.on("error", function (error) {
      return _this.logger.error("Error while connecting to MongoDB", error);
    });
  }
  /**
   * Connects to MongoDB
   * @param {number} poolSize - Connection pool size
   * @param {boolean} autoIndex - Use autoIndex
   * @param {number} numOfRetries - Number of connection attempts
   */
  MongoDBManager.prototype.connect = function (poolSize, autoIndex, numOfRetries) {
    if (poolSize === void 0) {
      poolSize = 10;
    }
    if (autoIndex === void 0) {
      autoIndex = true;
    }
    if (numOfRetries === void 0) {
      numOfRetries = 3;
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var error_1;
      var _this = this;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.logger.info("Attempting to connect to MongoDB. Retries left: ".concat(numOfRetries));
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [
              4 /*yield*/,
              mongoose_1.default.connect(this.connectionString, {
                maxPoolSize: poolSize,
                autoIndex: autoIndex,
              }),
            ];
          case 2:
            _a.sent();
            return [3 /*break*/, 4];
          case 3:
            error_1 = _a.sent();
            this.logger.error("Failed to connected to MongoDB", error_1);
            if (numOfRetries <= 0) {
              this.logger.error("Exhausted max number of retries for connecting to MongoDB");
              process.exit(1);
            }
            setTimeout(function () {
              _this.connect(poolSize, autoIndex, numOfRetries - 1);
            }, 1000);
            return [3 /*break*/, 4];
          case 4:
            return [2 /*return*/];
        }
      });
    });
  };

  MongoDBManager.prototype.close = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _this = this;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.logger.info("Closing database connection...");
            return [
              4 /*yield*/,
              mongoose_1.default.connection.close().catch(function (error) {
                _this.logger.error("Error while closing MongoDB database", {
                  error: error,
                });
                process.exit(1);
              }),
            ];
          case 1:
            _a.sent();
            return [2 /*return*/];
        }
      });
    });
  };

  return MongoDBManager;
})();
exports.default = MongoDBManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
