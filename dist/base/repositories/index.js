"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var InvalidPayloadError_1 = tslib_1.__importDefault(require("../../interfaces/rest/errors/InvalidPayloadError"));
var ResourceNotFoundError_1 = tslib_1.__importDefault(
  require("../../interfaces/rest/errors/ResourceNotFoundError"),
);
var mongoose_1 = tslib_1.__importDefault(require("mongoose"));
var BaseRepository = /** @class */ (function () {
  /**
   * @constructor
   * @param {*} param0
   */
  function BaseRepository(_a) {
    var Model = _a.Model;
    this.Collection = Model;
    this.modelName = this.Collection.modelName;
  }
  // eslint-disable-next-line class-methods-use-this
  BaseRepository.prototype.isValidId = function (documentId) {
    return mongoose_1.default.Types.ObjectId.isValid(documentId);
  };
  BaseRepository.prototype.count = function (query) {
    if (query === void 0) {
      query = {};
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        return [2 /*return*/, this.Collection.countDocuments(query)];
      });
    });
  };
  BaseRepository.prototype.totalCount = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        return [2 /*return*/, this.Collection.estimatedDocumentCount()];
      });
    });
  };
  /* Full list of option - https://mongoosejs.com/docs/api.html#query_Query-setOptions */
  /**
   *
   * @param {*} query
   * @param {*} projection
   * @param {*} options
   * @param {*} multiple
   * @returns {Document}
   * @memberof BaseRepository
   */
  BaseRepository.prototype.find = function (query, projection, options, multiple) {
    if (query === void 0) {
      query = {};
    }
    if (projection === void 0) {
      projection = {};
    }
    if (options === void 0) {
      options = {};
    }
    if (multiple === void 0) {
      multiple = false;
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var results;
      return tslib_1.__generator(this, function (_a) {
        results = multiple
          ? this.Collection.find(query, projection, options)
          : options.session
          ? this.Collection.findOne(query).session(options.session).select(projection)
          : this.Collection.findOne(query, projection, options);
        return [2 /*return*/, results.exec()];
      });
    });
  };
  /**
   *
   * @param {*} documentId
   * @param {*} projection
   * @param {*} options
   * @returns {Document}
   * @memberof BaseRepository
   */
  BaseRepository.prototype.findById = function (documentId, projection, options) {
    if (projection === void 0) {
      projection = {};
    }
    if (options === void 0) {
      options = {};
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var document, _a;
      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!this.isValidId(documentId)) {
              throw new InvalidPayloadError_1.default("Invalid ".concat(this.modelName, "Id"));
            }
            if (!options.session) return [3 /*break*/, 2];
            return [
              4 /*yield*/,
              this.Collection.findById(documentId)
                .session(options.session)
                .select(projection)
                .setOptions(options),
            ];
          case 1:
            _a = _b.sent();
            return [3 /*break*/, 4];
          case 2:
            return [4 /*yield*/, this.Collection.findById(documentId).select(projection).setOptions(options)];
          case 3:
            _a = _b.sent();
            _b.label = 4;
          case 4:
            document = _a;
            if (!document) {
              throw new ResourceNotFoundError_1.default("".concat(this.modelName, " not found"));
            }
            return [2 /*return*/, document];
        }
      });
    });
  };
  /**
   *
   * @param {*} query
   * @param {*} update
   * @param {*} options
   * @returns {Document}
   * @memberof BaseRepository
   */
  BaseRepository.prototype.findOneAndUpdate = function (query, update, options) {
    if (query === void 0) {
      query = {};
    }
    if (update === void 0) {
      update = {};
    }
    if (options === void 0) {
      options = {};
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var document;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (query._id && !this.isValidId(query._id)) {
              throw new InvalidPayloadError_1.default("Invalid ".concat(this.modelName, "Id"));
            }
            return [4 /*yield*/, this.Collection.findOneAndUpdate(query, update, options)];
          case 1:
            document = _a.sent();
            if (!document) {
              throw new ResourceNotFoundError_1.default("".concat(this.modelName, " not found"));
            }
            return [2 /*return*/, document];
        }
      });
    });
  };
  /**
   *
   * @param {*} body
   * @param {*} session
   * @returns {Document}
   * @memberof BaseRepository
   */
  BaseRepository.prototype.createDoc = function (body, session) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var document;
      return tslib_1.__generator(this, function (_a) {
        document = new this.Collection(body);
        document = session
          ? document.save({
              session: session,
            })
          : document.save();
        return [2 /*return*/, document];
      });
    });
  };
  /**
   * Update a document
   * @param {*} query
   * @param {Object} body
   * @param {Object} options
   * @returns {Document}
   * @memberof BaseRepository
   */
  BaseRepository.prototype.update = function (query, update, options) {
    if (update === void 0) {
      update = {};
    }
    if (options === void 0) {
      options = {};
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var document;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (query._id && !this.isValidId(query._id)) {
              throw new InvalidPayloadError_1.default("Invalid ".concat(this.modelName, "Id"));
            }
            return [4 /*yield*/, this.Collection.update(query, update, options)];
          case 1:
            document = _a.sent();
            if (!document) {
              throw new ResourceNotFoundError_1.default("".concat(this.modelName, " not found"));
            }
            return [2 /*return*/, document];
        }
      });
    });
  };
  /**
   *
   * @param {*} query
   * @param {*} update
   * @param {*} options
   * @returns {Document}
   * @memberof BaseRepository
   */
  BaseRepository.prototype.findOneAndDelete = function (query, options) {
    if (query === void 0) {
      query = {};
    }
    if (options === void 0) {
      options = {};
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var document;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (query._id && !this.isValidId(query._id)) {
              throw new InvalidPayloadError_1.default("Invalid ".concat(this.modelName, "Id"));
            }
            return [4 /*yield*/, this.Collection.findOneAndDelete(query, options)];
          case 1:
            document = _a.sent();
            if (!document) {
              throw new ResourceNotFoundError_1.default("".concat(this.modelName, " not found"));
            }
            return [2 /*return*/, document];
        }
      });
    });
  };
  return BaseRepository;
})();
exports.default = BaseRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
