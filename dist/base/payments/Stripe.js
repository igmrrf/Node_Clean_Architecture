"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var stripe = require("stripe");
var Stripe = /** @class */ (function () {
  function Stripe(_a) {
    var config = _a.config;
    var secretKey = config.get("stripe.stripeSK");
    this.stripe = stripe(secretKey);
  }
  Stripe.prototype.createAccount = function (_a) {
    var email = _a.email,
      name = _a.name;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var customer;
      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [
              4 /*yield*/,
              this.stripe.customers.create({
                email: email,
                name: name,
              }),
            ];
          case 1:
            customer = _b.sent();
            return [2 /*return*/, customer];
        }
      });
    });
  };
  Stripe.prototype.createPaymentIntent = function (customer, payment) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var paymentIntent;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              this.stripe.paymentIntents.create({
                customer: customer.id,
                setup_future_usage: "off_session",
                amount: payment.amount * 100,
                currency: payment.currency,
                automatic_payment_methods: {
                  enabled: false,
                },
              }),
            ];
          case 1:
            paymentIntent = _a.sent();
            return [2 /*return*/, paymentIntent];
        }
      });
    });
  };
  return Stripe;
})();
exports.default = Stripe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwic3RyaXBlIiwiU3RyaXBlIiwiX2EiLCJjb25maWciLCJzZWNyZXRLZXkiLCJnZXQiLCJwcm90b3R5cGUiLCJjcmVhdGVBY2NvdW50IiwiZW1haWwiLCJuYW1lIiwiX19hd2FpdGVyIiwiY3VzdG9tZXIiLCJfX2dlbmVyYXRvciIsIl9iIiwibGFiZWwiLCJjdXN0b21lcnMiLCJjcmVhdGUiLCJzZW50IiwiY3JlYXRlUGF5bWVudEludGVudCIsInBheW1lbnQiLCJwYXltZW50SW50ZW50IiwicGF5bWVudEludGVudHMiLCJpZCIsInNldHVwX2Z1dHVyZV91c2FnZSIsImFtb3VudCIsImN1cnJlbmN5IiwiYXV0b21hdGljX3BheW1lbnRfbWV0aG9kcyIsImVuYWJsZWQiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vdHlwZWQvYmFzZS9wYXltZW50cy9TdHJpcGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBzdHJpcGUgPSByZXF1aXJlKFwic3RyaXBlXCIpO1xudmFyIFN0cmlwZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdHJpcGUoX2EpIHtcbiAgICAgICAgdmFyIGNvbmZpZyA9IF9hLmNvbmZpZztcbiAgICAgICAgdmFyIHNlY3JldEtleSA9IGNvbmZpZy5nZXQoXCJzdHJpcGUuc3RyaXBlU0tcIik7XG4gICAgICAgIHRoaXMuc3RyaXBlID0gc3RyaXBlKHNlY3JldEtleSk7XG4gICAgfVxuICAgIFN0cmlwZS5wcm90b3R5cGUuY3JlYXRlQWNjb3VudCA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZW1haWwgPSBfYS5lbWFpbCwgbmFtZSA9IF9hLm5hbWU7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGN1c3RvbWVyO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RyaXBlLmN1c3RvbWVycy5jcmVhdGUoeyBlbWFpbDogZW1haWwsIG5hbWU6IG5hbWUgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lciA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjdXN0b21lcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3RyaXBlLnByb3RvdHlwZS5jcmVhdGVQYXltZW50SW50ZW50ID0gZnVuY3Rpb24gKGN1c3RvbWVyLCBwYXltZW50KSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHBheW1lbnRJbnRlbnQ7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdHJpcGUucGF5bWVudEludGVudHMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lcjogY3VzdG9tZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBfZnV0dXJlX3VzYWdlOiBcIm9mZl9zZXNzaW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBwYXltZW50LmFtb3VudCAqIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeTogcGF5bWVudC5jdXJyZW5jeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvbWF0aWNfcGF5bWVudF9tZXRob2RzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnRJbnRlbnQgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcGF5bWVudEludGVudF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFN0cmlwZTtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdHJpcGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3RCxJQUFJQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsSUFBSUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzlCLElBQUlFLE1BQU0sR0FBRyxhQUFlLFlBQVk7RUFDcEMs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
