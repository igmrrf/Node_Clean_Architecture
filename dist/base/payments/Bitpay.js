"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
var tslib_1 = require("tslib");
var bitpay_sdk_1 = require("bitpay-sdk");
var config = "public/BitPay.config.json";
var BitPay = /** @class */ (function () {
  function BitPay() {
    var client = new bitpay_sdk_1.Client(config);
    this.client = client;
  }
  BitPay.prototype.createInvoice = function (payload) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var email, amount, order, currency, buyer, invoiceData, invoice;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            (email = payload.email),
              (amount = payload.amount),
              (order = payload.order),
              (currency = payload.currency);
            buyer = {};
            buyer.email = email;
            buyer.notify = true;
            invoiceData = new bitpay_sdk_1.Models.Invoice(amount, currency);
            invoiceData.price = amount;
            invoiceData.buyer = buyer;
            invoiceData.orderId = order;
            invoiceData.fullNotifications = true;
            invoiceData.extendedNotifications = true;
            invoiceData.notificationURL = "https://test.domain.com/confirm";
            invoiceData.redirectURL = "https://test.domain.com/confirm/".concat(order);
            invoiceData.itemDesc = "Item Description.";
            invoiceData.notificationEmail = "[dev@domain.com]";
            return [4 /*yield*/, this.client.CreateInvoice(invoiceData)];
          case 1:
            invoice = _a.sent();
            return [2 /*return*/, invoice];
        }
      });
    });
  };
  BitPay.prototype.confirmInvoice = function (invoiceId) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var invoice;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4 /*yield*/, this.client.GetInvoice(invoiceId)];
          case 1:
            invoice = _a.sent();
            // Checking the status of the invoice
            return [2 /*return*/, invoice];
        }
      });
    });
  };
  return BitPay;
})();
exports.default = BitPay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiYml0cGF5X3Nka18xIiwiY29uZmlnIiwiQml0UGF5IiwiY2xpZW50IiwiQ2xpZW50IiwicHJvdG90eXBlIiwiY3JlYXRlSW52b2ljZSIsInBheWxvYWQiLCJfX2F3YWl0ZXIiLCJlbWFpbCIsImFtb3VudCIsIm9yZGVyIiwiY3VycmVuY3kiLCJidXllciIsImludm9pY2VEYXRhIiwiaW52b2ljZSIsIl9fZ2VuZXJhdG9yIiwiX2EiLCJsYWJlbCIsIm5vdGlmeSIsIk1vZGVscyIsIkludm9pY2UiLCJwcmljZSIsIm9yZGVySWQiLCJmdWxsTm90aWZpY2F0aW9ucyIsImV4dGVuZGVkTm90aWZpY2F0aW9ucyIsIm5vdGlmaWNhdGlvblVSTCIsInJlZGlyZWN0VVJMIiwiY29uY2F0IiwiaXRlbURlc2MiLCJub3RpZmljYXRpb25FbWFpbCIsIkNyZWF0ZUludm9pY2UiLCJzZW50IiwiY29uZmlybUludm9pY2UiLCJpbnZvaWNlSWQiLCJHZXRJbnZvaWNlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3R5cGVkL2Jhc2UvcGF5bWVudHMvQml0cGF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgYml0cGF5X3Nka18xID0gcmVxdWlyZShcImJpdHBheS1zZGtcIik7XG52YXIgY29uZmlnID0gXCJwdWJsaWMvQml0UGF5LmNvbmZpZy5qc29uXCI7XG52YXIgQml0UGF5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJpdFBheSgpIHtcbiAgICAgICAgdmFyIGNsaWVudCA9IG5ldyBiaXRwYXlfc2RrXzEuQ2xpZW50KGNvbmZpZyk7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIH1cbiAgICBCaXRQYXkucHJvdG90eXBlLmNyZWF0ZUludm9pY2UgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlbWFpbCwgYW1vdW50LCBvcmRlciwgY3VycmVuY3ksIGJ1eWVyLCBpbnZvaWNlRGF0YSwgaW52b2ljZTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgPSBwYXlsb2FkLmVtYWlsLCBhbW91bnQgPSBwYXlsb2FkLmFtb3VudCwgb3JkZXIgPSBwYXlsb2FkLm9yZGVyLCBjdXJyZW5jeSA9IHBheWxvYWQuY3VycmVuY3k7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXllciA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV5ZXIuZW1haWwgPSBlbWFpbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1eWVyLm5vdGlmeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlRGF0YSA9IG5ldyBiaXRwYXlfc2RrXzEuTW9kZWxzLkludm9pY2UoYW1vdW50LCBjdXJyZW5jeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlRGF0YS5wcmljZSA9IGFtb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9pY2VEYXRhLmJ1eWVyID0gYnV5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlRGF0YS5vcmRlcklkID0gb3JkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlRGF0YS5mdWxsTm90aWZpY2F0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlRGF0YS5leHRlbmRlZE5vdGlmaWNhdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZURhdGEubm90aWZpY2F0aW9uVVJMID0gXCJodHRwczovL3Rlc3QuZG9tYWluLmNvbS9jb25maXJtXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlRGF0YS5yZWRpcmVjdFVSTCA9IFwiaHR0cHM6Ly90ZXN0LmRvbWFpbi5jb20vY29uZmlybS9cIi5jb25jYXQob3JkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZURhdGEuaXRlbURlc2MgPSBcIkl0ZW0gRGVzY3JpcHRpb24uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlRGF0YS5ub3RpZmljYXRpb25FbWFpbCA9IFwiW2RldkBkb21haW4uY29tXVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jbGllbnQuQ3JlYXRlSW52b2ljZShpbnZvaWNlRGF0YSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZvaWNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGludm9pY2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEJpdFBheS5wcm90b3R5cGUuY29uZmlybUludm9pY2UgPSBmdW5jdGlvbiAoaW52b2ljZUlkKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGludm9pY2U7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jbGllbnQuR2V0SW52b2ljZShpbnZvaWNlSWQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNraW5nIHRoZSBzdGF0dXMgb2YgdGhlIGludm9pY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBpbnZvaWNlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQml0UGF5O1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEJpdFBheTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixJQUFJQyxZQUFZLEdBQUdELE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDeEMsSUFBSUUsTUFBTSxHQUFHLDJCQUEyQjtBQUN4QyxJQUFJQyxNQUFNLEdBQUcsYUFBZSxZQUFZO0VBQ3BDLFNBQVNBLE1BQU0sR0FBRztJQUNkLElBQUlDLE1BQU0sR0FBRyxJQUFJSCxZQUFZLENBQUNJLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDO0lBQzVDLElBQUksQ0FBQ0UsTUFBTSxHQUFHQSxNQUFNO0VBQ3hCO0VBQ0FELE1BQU0sQ0FBQ0csU0FBUyxDQUFDQyxh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
